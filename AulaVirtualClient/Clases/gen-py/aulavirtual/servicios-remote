#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from aulavirtual import servicios
from aulavirtual.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string iniciarSesion(string username, string password)')
    print('  string registrarse(string matricula, string nombre, string apellidoPaterno, string apellidoMaterno, string correo, string password, i32 tipoUsuario)')
    print('   obtenerClasesUsuario(string matricula)')
    print('   obtenerMaestros()')
    print('   obtenerClases()')
    print('   obtenerPeriodos()')
    print('  string registrarClase(string NRC, string nombreClase, i32 idPeriodo, string numeroPersonalMaestro)')
    print('  string inscribirClase(string matricula, string NRC, string rol)')
    print('  void enviarMensaje(string mensaje, string clase)')
    print('  void recibirMensaje(string mensaje)')
    print('  void pedirParticipacion(string nombre, string ip)')
    print('  void mostrarSolicitudParticipacion( datosAlumno)')
    print('  void otorgarParticipacion(string ipAlumno)')
    print('  void mostrarParticipacion(string ipAlumno)')
    print('  void activarSolicitudParticipacion()')
    print('  void desactivarSolicitudParticipacion()')
    print('  void pedirControl(string ipAlumno)')
    print('  void obtenerControl()')
    print('  void dejarControl()')
    print('  void recuperarControl(string ipAlumno)')
    print('  void salirAula(string nombre, string ip, string clase, i32 rol)')
    print('  void entrarAula(string nombre, string ip, string clase, i32 rol)')
    print('  void actualizarUsuariosConectados( conectados)')
    print('  void actualizarParticipantes()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = servicios.Client(protocol)
transport.open()

if cmd == 'iniciarSesion':
    if len(args) != 2:
        print('iniciarSesion requires 2 args')
        sys.exit(1)
    pp.pprint(client.iniciarSesion(args[0], args[1],))

elif cmd == 'registrarse':
    if len(args) != 7:
        print('registrarse requires 7 args')
        sys.exit(1)
    pp.pprint(client.registrarse(args[0], args[1], args[2], args[3], args[4], args[5], eval(args[6]),))

elif cmd == 'obtenerClasesUsuario':
    if len(args) != 1:
        print('obtenerClasesUsuario requires 1 args')
        sys.exit(1)
    pp.pprint(client.obtenerClasesUsuario(args[0],))

elif cmd == 'obtenerMaestros':
    if len(args) != 0:
        print('obtenerMaestros requires 0 args')
        sys.exit(1)
    pp.pprint(client.obtenerMaestros())

elif cmd == 'obtenerClases':
    if len(args) != 0:
        print('obtenerClases requires 0 args')
        sys.exit(1)
    pp.pprint(client.obtenerClases())

elif cmd == 'obtenerPeriodos':
    if len(args) != 0:
        print('obtenerPeriodos requires 0 args')
        sys.exit(1)
    pp.pprint(client.obtenerPeriodos())

elif cmd == 'registrarClase':
    if len(args) != 4:
        print('registrarClase requires 4 args')
        sys.exit(1)
    pp.pprint(client.registrarClase(args[0], args[1], eval(args[2]), args[3],))

elif cmd == 'inscribirClase':
    if len(args) != 3:
        print('inscribirClase requires 3 args')
        sys.exit(1)
    pp.pprint(client.inscribirClase(args[0], args[1], args[2],))

elif cmd == 'enviarMensaje':
    if len(args) != 2:
        print('enviarMensaje requires 2 args')
        sys.exit(1)
    pp.pprint(client.enviarMensaje(args[0], args[1],))

elif cmd == 'recibirMensaje':
    if len(args) != 1:
        print('recibirMensaje requires 1 args')
        sys.exit(1)
    pp.pprint(client.recibirMensaje(args[0],))

elif cmd == 'pedirParticipacion':
    if len(args) != 2:
        print('pedirParticipacion requires 2 args')
        sys.exit(1)
    pp.pprint(client.pedirParticipacion(args[0], args[1],))

elif cmd == 'mostrarSolicitudParticipacion':
    if len(args) != 1:
        print('mostrarSolicitudParticipacion requires 1 args')
        sys.exit(1)
    pp.pprint(client.mostrarSolicitudParticipacion(eval(args[0]),))

elif cmd == 'otorgarParticipacion':
    if len(args) != 1:
        print('otorgarParticipacion requires 1 args')
        sys.exit(1)
    pp.pprint(client.otorgarParticipacion(args[0],))

elif cmd == 'mostrarParticipacion':
    if len(args) != 1:
        print('mostrarParticipacion requires 1 args')
        sys.exit(1)
    pp.pprint(client.mostrarParticipacion(args[0],))

elif cmd == 'activarSolicitudParticipacion':
    if len(args) != 0:
        print('activarSolicitudParticipacion requires 0 args')
        sys.exit(1)
    pp.pprint(client.activarSolicitudParticipacion())

elif cmd == 'desactivarSolicitudParticipacion':
    if len(args) != 0:
        print('desactivarSolicitudParticipacion requires 0 args')
        sys.exit(1)
    pp.pprint(client.desactivarSolicitudParticipacion())

elif cmd == 'pedirControl':
    if len(args) != 1:
        print('pedirControl requires 1 args')
        sys.exit(1)
    pp.pprint(client.pedirControl(args[0],))

elif cmd == 'obtenerControl':
    if len(args) != 0:
        print('obtenerControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.obtenerControl())

elif cmd == 'dejarControl':
    if len(args) != 0:
        print('dejarControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.dejarControl())

elif cmd == 'recuperarControl':
    if len(args) != 1:
        print('recuperarControl requires 1 args')
        sys.exit(1)
    pp.pprint(client.recuperarControl(args[0],))

elif cmd == 'salirAula':
    if len(args) != 4:
        print('salirAula requires 4 args')
        sys.exit(1)
    pp.pprint(client.salirAula(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'entrarAula':
    if len(args) != 4:
        print('entrarAula requires 4 args')
        sys.exit(1)
    pp.pprint(client.entrarAula(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'actualizarUsuariosConectados':
    if len(args) != 1:
        print('actualizarUsuariosConectados requires 1 args')
        sys.exit(1)
    pp.pprint(client.actualizarUsuariosConectados(eval(args[0]),))

elif cmd == 'actualizarParticipantes':
    if len(args) != 0:
        print('actualizarParticipantes requires 0 args')
        sys.exit(1)
    pp.pprint(client.actualizarParticipantes())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
