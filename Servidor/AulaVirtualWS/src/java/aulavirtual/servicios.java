/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package aulavirtual;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-07")
public class servicios {

  public interface Iface {

    public java.lang.String iniciarSesion(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException;

    public java.lang.String registrarse(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> obtenerClasesUsuario(java.lang.String matricula) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> obtenerMaestros() throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> obtenerClases() throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> obtenerPeriodos() throws org.apache.thrift.TException;

    public java.lang.String registrarClase(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro) throws org.apache.thrift.TException;

    public java.lang.String inscribirClase(java.lang.String matricula, java.lang.String NRC, java.lang.String rol) throws org.apache.thrift.TException;

    public void enviarMensaje(java.lang.String mensaje, java.lang.String clase) throws org.apache.thrift.TException;

    public void recibirMensaje(java.lang.String mensaje) throws org.apache.thrift.TException;

    public void pedirParticipacion(java.lang.String nombre, java.lang.String ip) throws org.apache.thrift.TException;

    public void mostrarSolicitudParticipacion(java.util.List<java.lang.String> datosAlumno) throws org.apache.thrift.TException;

    public void otorgarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException;

    public void mostrarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException;

    public void activarSolicitudParticipacion() throws org.apache.thrift.TException;

    public void desactivarSolicitudParticipacion() throws org.apache.thrift.TException;

    public void pedirControl(java.lang.String ipAlumno) throws org.apache.thrift.TException;

    public void obtenerControl() throws org.apache.thrift.TException;

    public void dejarControl() throws org.apache.thrift.TException;

    public void recuperarControl(java.lang.String ipAlumno) throws org.apache.thrift.TException;

    public void salirAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException;

    public void entrarAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException;

    public void actualizarUsuariosConectados(java.util.List<java.lang.String> conectados) throws org.apache.thrift.TException;

    public void actualizarParticipantes() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void iniciarSesion(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void registrarse(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void obtenerClasesUsuario(java.lang.String matricula, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void obtenerMaestros(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void obtenerClases(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void obtenerPeriodos(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void registrarClase(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void inscribirClase(java.lang.String matricula, java.lang.String NRC, java.lang.String rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void enviarMensaje(java.lang.String mensaje, java.lang.String clase, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void recibirMensaje(java.lang.String mensaje, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void pedirParticipacion(java.lang.String nombre, java.lang.String ip, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mostrarSolicitudParticipacion(java.util.List<java.lang.String> datosAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void otorgarParticipacion(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mostrarParticipacion(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void activarSolicitudParticipacion(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void desactivarSolicitudParticipacion(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void pedirControl(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void obtenerControl(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void dejarControl(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void recuperarControl(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void salirAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void entrarAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void actualizarUsuariosConectados(java.util.List<java.lang.String> conectados, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void actualizarParticipantes(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String iniciarSesion(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      send_iniciarSesion(username, password);
      return recv_iniciarSesion();
    }

    public void send_iniciarSesion(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      iniciarSesion_args args = new iniciarSesion_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("iniciarSesion", args);
    }

    public java.lang.String recv_iniciarSesion() throws org.apache.thrift.TException
    {
      iniciarSesion_result result = new iniciarSesion_result();
      receiveBase(result, "iniciarSesion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "iniciarSesion failed: unknown result");
    }

    public java.lang.String registrarse(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario) throws org.apache.thrift.TException
    {
      send_registrarse(matricula, nombre, apellidoPaterno, apellidoMaterno, correo, password, tipoUsuario);
      return recv_registrarse();
    }

    public void send_registrarse(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario) throws org.apache.thrift.TException
    {
      registrarse_args args = new registrarse_args();
      args.setMatricula(matricula);
      args.setNombre(nombre);
      args.setApellidoPaterno(apellidoPaterno);
      args.setApellidoMaterno(apellidoMaterno);
      args.setCorreo(correo);
      args.setPassword(password);
      args.setTipoUsuario(tipoUsuario);
      sendBase("registrarse", args);
    }

    public java.lang.String recv_registrarse() throws org.apache.thrift.TException
    {
      registrarse_result result = new registrarse_result();
      receiveBase(result, "registrarse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registrarse failed: unknown result");
    }

    public java.util.List<java.lang.String> obtenerClasesUsuario(java.lang.String matricula) throws org.apache.thrift.TException
    {
      send_obtenerClasesUsuario(matricula);
      return recv_obtenerClasesUsuario();
    }

    public void send_obtenerClasesUsuario(java.lang.String matricula) throws org.apache.thrift.TException
    {
      obtenerClasesUsuario_args args = new obtenerClasesUsuario_args();
      args.setMatricula(matricula);
      sendBase("obtenerClasesUsuario", args);
    }

    public java.util.List<java.lang.String> recv_obtenerClasesUsuario() throws org.apache.thrift.TException
    {
      obtenerClasesUsuario_result result = new obtenerClasesUsuario_result();
      receiveBase(result, "obtenerClasesUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerClasesUsuario failed: unknown result");
    }

    public java.util.List<java.lang.String> obtenerMaestros() throws org.apache.thrift.TException
    {
      send_obtenerMaestros();
      return recv_obtenerMaestros();
    }

    public void send_obtenerMaestros() throws org.apache.thrift.TException
    {
      obtenerMaestros_args args = new obtenerMaestros_args();
      sendBase("obtenerMaestros", args);
    }

    public java.util.List<java.lang.String> recv_obtenerMaestros() throws org.apache.thrift.TException
    {
      obtenerMaestros_result result = new obtenerMaestros_result();
      receiveBase(result, "obtenerMaestros");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerMaestros failed: unknown result");
    }

    public java.util.List<java.lang.String> obtenerClases() throws org.apache.thrift.TException
    {
      send_obtenerClases();
      return recv_obtenerClases();
    }

    public void send_obtenerClases() throws org.apache.thrift.TException
    {
      obtenerClases_args args = new obtenerClases_args();
      sendBase("obtenerClases", args);
    }

    public java.util.List<java.lang.String> recv_obtenerClases() throws org.apache.thrift.TException
    {
      obtenerClases_result result = new obtenerClases_result();
      receiveBase(result, "obtenerClases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerClases failed: unknown result");
    }

    public java.util.List<java.lang.String> obtenerPeriodos() throws org.apache.thrift.TException
    {
      send_obtenerPeriodos();
      return recv_obtenerPeriodos();
    }

    public void send_obtenerPeriodos() throws org.apache.thrift.TException
    {
      obtenerPeriodos_args args = new obtenerPeriodos_args();
      sendBase("obtenerPeriodos", args);
    }

    public java.util.List<java.lang.String> recv_obtenerPeriodos() throws org.apache.thrift.TException
    {
      obtenerPeriodos_result result = new obtenerPeriodos_result();
      receiveBase(result, "obtenerPeriodos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerPeriodos failed: unknown result");
    }

    public java.lang.String registrarClase(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro) throws org.apache.thrift.TException
    {
      send_registrarClase(NRC, nombreClase, idPeriodo, numeroPersonalMaestro);
      return recv_registrarClase();
    }

    public void send_registrarClase(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro) throws org.apache.thrift.TException
    {
      registrarClase_args args = new registrarClase_args();
      args.setNRC(NRC);
      args.setNombreClase(nombreClase);
      args.setIdPeriodo(idPeriodo);
      args.setNumeroPersonalMaestro(numeroPersonalMaestro);
      sendBase("registrarClase", args);
    }

    public java.lang.String recv_registrarClase() throws org.apache.thrift.TException
    {
      registrarClase_result result = new registrarClase_result();
      receiveBase(result, "registrarClase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registrarClase failed: unknown result");
    }

    public java.lang.String inscribirClase(java.lang.String matricula, java.lang.String NRC, java.lang.String rol) throws org.apache.thrift.TException
    {
      send_inscribirClase(matricula, NRC, rol);
      return recv_inscribirClase();
    }

    public void send_inscribirClase(java.lang.String matricula, java.lang.String NRC, java.lang.String rol) throws org.apache.thrift.TException
    {
      inscribirClase_args args = new inscribirClase_args();
      args.setMatricula(matricula);
      args.setNRC(NRC);
      args.setRol(rol);
      sendBase("inscribirClase", args);
    }

    public java.lang.String recv_inscribirClase() throws org.apache.thrift.TException
    {
      inscribirClase_result result = new inscribirClase_result();
      receiveBase(result, "inscribirClase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inscribirClase failed: unknown result");
    }

    public void enviarMensaje(java.lang.String mensaje, java.lang.String clase) throws org.apache.thrift.TException
    {
      send_enviarMensaje(mensaje, clase);
      recv_enviarMensaje();
    }

    public void send_enviarMensaje(java.lang.String mensaje, java.lang.String clase) throws org.apache.thrift.TException
    {
      enviarMensaje_args args = new enviarMensaje_args();
      args.setMensaje(mensaje);
      args.setClase(clase);
      sendBase("enviarMensaje", args);
    }

    public void recv_enviarMensaje() throws org.apache.thrift.TException
    {
      enviarMensaje_result result = new enviarMensaje_result();
      receiveBase(result, "enviarMensaje");
      return;
    }

    public void recibirMensaje(java.lang.String mensaje) throws org.apache.thrift.TException
    {
      send_recibirMensaje(mensaje);
      recv_recibirMensaje();
    }

    public void send_recibirMensaje(java.lang.String mensaje) throws org.apache.thrift.TException
    {
      recibirMensaje_args args = new recibirMensaje_args();
      args.setMensaje(mensaje);
      sendBase("recibirMensaje", args);
    }

    public void recv_recibirMensaje() throws org.apache.thrift.TException
    {
      recibirMensaje_result result = new recibirMensaje_result();
      receiveBase(result, "recibirMensaje");
      return;
    }

    public void pedirParticipacion(java.lang.String nombre, java.lang.String ip) throws org.apache.thrift.TException
    {
      send_pedirParticipacion(nombre, ip);
      recv_pedirParticipacion();
    }

    public void send_pedirParticipacion(java.lang.String nombre, java.lang.String ip) throws org.apache.thrift.TException
    {
      pedirParticipacion_args args = new pedirParticipacion_args();
      args.setNombre(nombre);
      args.setIp(ip);
      sendBase("pedirParticipacion", args);
    }

    public void recv_pedirParticipacion() throws org.apache.thrift.TException
    {
      pedirParticipacion_result result = new pedirParticipacion_result();
      receiveBase(result, "pedirParticipacion");
      return;
    }

    public void mostrarSolicitudParticipacion(java.util.List<java.lang.String> datosAlumno) throws org.apache.thrift.TException
    {
      send_mostrarSolicitudParticipacion(datosAlumno);
      recv_mostrarSolicitudParticipacion();
    }

    public void send_mostrarSolicitudParticipacion(java.util.List<java.lang.String> datosAlumno) throws org.apache.thrift.TException
    {
      mostrarSolicitudParticipacion_args args = new mostrarSolicitudParticipacion_args();
      args.setDatosAlumno(datosAlumno);
      sendBase("mostrarSolicitudParticipacion", args);
    }

    public void recv_mostrarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      mostrarSolicitudParticipacion_result result = new mostrarSolicitudParticipacion_result();
      receiveBase(result, "mostrarSolicitudParticipacion");
      return;
    }

    public void otorgarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      send_otorgarParticipacion(ipAlumno);
      recv_otorgarParticipacion();
    }

    public void send_otorgarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      otorgarParticipacion_args args = new otorgarParticipacion_args();
      args.setIpAlumno(ipAlumno);
      sendBase("otorgarParticipacion", args);
    }

    public void recv_otorgarParticipacion() throws org.apache.thrift.TException
    {
      otorgarParticipacion_result result = new otorgarParticipacion_result();
      receiveBase(result, "otorgarParticipacion");
      return;
    }

    public void mostrarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      send_mostrarParticipacion(ipAlumno);
      recv_mostrarParticipacion();
    }

    public void send_mostrarParticipacion(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      mostrarParticipacion_args args = new mostrarParticipacion_args();
      args.setIpAlumno(ipAlumno);
      sendBase("mostrarParticipacion", args);
    }

    public void recv_mostrarParticipacion() throws org.apache.thrift.TException
    {
      mostrarParticipacion_result result = new mostrarParticipacion_result();
      receiveBase(result, "mostrarParticipacion");
      return;
    }

    public void activarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      send_activarSolicitudParticipacion();
      recv_activarSolicitudParticipacion();
    }

    public void send_activarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      activarSolicitudParticipacion_args args = new activarSolicitudParticipacion_args();
      sendBase("activarSolicitudParticipacion", args);
    }

    public void recv_activarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      activarSolicitudParticipacion_result result = new activarSolicitudParticipacion_result();
      receiveBase(result, "activarSolicitudParticipacion");
      return;
    }

    public void desactivarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      send_desactivarSolicitudParticipacion();
      recv_desactivarSolicitudParticipacion();
    }

    public void send_desactivarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      desactivarSolicitudParticipacion_args args = new desactivarSolicitudParticipacion_args();
      sendBase("desactivarSolicitudParticipacion", args);
    }

    public void recv_desactivarSolicitudParticipacion() throws org.apache.thrift.TException
    {
      desactivarSolicitudParticipacion_result result = new desactivarSolicitudParticipacion_result();
      receiveBase(result, "desactivarSolicitudParticipacion");
      return;
    }

    public void pedirControl(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      send_pedirControl(ipAlumno);
      recv_pedirControl();
    }

    public void send_pedirControl(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      pedirControl_args args = new pedirControl_args();
      args.setIpAlumno(ipAlumno);
      sendBase("pedirControl", args);
    }

    public void recv_pedirControl() throws org.apache.thrift.TException
    {
      pedirControl_result result = new pedirControl_result();
      receiveBase(result, "pedirControl");
      return;
    }

    public void obtenerControl() throws org.apache.thrift.TException
    {
      send_obtenerControl();
      recv_obtenerControl();
    }

    public void send_obtenerControl() throws org.apache.thrift.TException
    {
      obtenerControl_args args = new obtenerControl_args();
      sendBase("obtenerControl", args);
    }

    public void recv_obtenerControl() throws org.apache.thrift.TException
    {
      obtenerControl_result result = new obtenerControl_result();
      receiveBase(result, "obtenerControl");
      return;
    }

    public void dejarControl() throws org.apache.thrift.TException
    {
      send_dejarControl();
      recv_dejarControl();
    }

    public void send_dejarControl() throws org.apache.thrift.TException
    {
      dejarControl_args args = new dejarControl_args();
      sendBase("dejarControl", args);
    }

    public void recv_dejarControl() throws org.apache.thrift.TException
    {
      dejarControl_result result = new dejarControl_result();
      receiveBase(result, "dejarControl");
      return;
    }

    public void recuperarControl(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      send_recuperarControl(ipAlumno);
      recv_recuperarControl();
    }

    public void send_recuperarControl(java.lang.String ipAlumno) throws org.apache.thrift.TException
    {
      recuperarControl_args args = new recuperarControl_args();
      args.setIpAlumno(ipAlumno);
      sendBase("recuperarControl", args);
    }

    public void recv_recuperarControl() throws org.apache.thrift.TException
    {
      recuperarControl_result result = new recuperarControl_result();
      receiveBase(result, "recuperarControl");
      return;
    }

    public void salirAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException
    {
      send_salirAula(nombre, ip, clase, rol);
      recv_salirAula();
    }

    public void send_salirAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException
    {
      salirAula_args args = new salirAula_args();
      args.setNombre(nombre);
      args.setIp(ip);
      args.setClase(clase);
      args.setRol(rol);
      sendBase("salirAula", args);
    }

    public void recv_salirAula() throws org.apache.thrift.TException
    {
      salirAula_result result = new salirAula_result();
      receiveBase(result, "salirAula");
      return;
    }

    public void entrarAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException
    {
      send_entrarAula(nombre, ip, clase, rol);
      recv_entrarAula();
    }

    public void send_entrarAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol) throws org.apache.thrift.TException
    {
      entrarAula_args args = new entrarAula_args();
      args.setNombre(nombre);
      args.setIp(ip);
      args.setClase(clase);
      args.setRol(rol);
      sendBase("entrarAula", args);
    }

    public void recv_entrarAula() throws org.apache.thrift.TException
    {
      entrarAula_result result = new entrarAula_result();
      receiveBase(result, "entrarAula");
      return;
    }

    public void actualizarUsuariosConectados(java.util.List<java.lang.String> conectados) throws org.apache.thrift.TException
    {
      send_actualizarUsuariosConectados(conectados);
      recv_actualizarUsuariosConectados();
    }

    public void send_actualizarUsuariosConectados(java.util.List<java.lang.String> conectados) throws org.apache.thrift.TException
    {
      actualizarUsuariosConectados_args args = new actualizarUsuariosConectados_args();
      args.setConectados(conectados);
      sendBase("actualizarUsuariosConectados", args);
    }

    public void recv_actualizarUsuariosConectados() throws org.apache.thrift.TException
    {
      actualizarUsuariosConectados_result result = new actualizarUsuariosConectados_result();
      receiveBase(result, "actualizarUsuariosConectados");
      return;
    }

    public void actualizarParticipantes() throws org.apache.thrift.TException
    {
      send_actualizarParticipantes();
      recv_actualizarParticipantes();
    }

    public void send_actualizarParticipantes() throws org.apache.thrift.TException
    {
      actualizarParticipantes_args args = new actualizarParticipantes_args();
      sendBase("actualizarParticipantes", args);
    }

    public void recv_actualizarParticipantes() throws org.apache.thrift.TException
    {
      actualizarParticipantes_result result = new actualizarParticipantes_result();
      receiveBase(result, "actualizarParticipantes");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void iniciarSesion(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      iniciarSesion_call method_call = new iniciarSesion_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class iniciarSesion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String username;
      private java.lang.String password;
      public iniciarSesion_call(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("iniciarSesion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        iniciarSesion_args args = new iniciarSesion_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_iniciarSesion();
      }
    }

    public void registrarse(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registrarse_call method_call = new registrarse_call(matricula, nombre, apellidoPaterno, apellidoMaterno, correo, password, tipoUsuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registrarse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String matricula;
      private java.lang.String nombre;
      private java.lang.String apellidoPaterno;
      private java.lang.String apellidoMaterno;
      private java.lang.String correo;
      private java.lang.String password;
      private int tipoUsuario;
      public registrarse_call(java.lang.String matricula, java.lang.String nombre, java.lang.String apellidoPaterno, java.lang.String apellidoMaterno, java.lang.String correo, java.lang.String password, int tipoUsuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matricula = matricula;
        this.nombre = nombre;
        this.apellidoPaterno = apellidoPaterno;
        this.apellidoMaterno = apellidoMaterno;
        this.correo = correo;
        this.password = password;
        this.tipoUsuario = tipoUsuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registrarse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registrarse_args args = new registrarse_args();
        args.setMatricula(matricula);
        args.setNombre(nombre);
        args.setApellidoPaterno(apellidoPaterno);
        args.setApellidoMaterno(apellidoMaterno);
        args.setCorreo(correo);
        args.setPassword(password);
        args.setTipoUsuario(tipoUsuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registrarse();
      }
    }

    public void obtenerClasesUsuario(java.lang.String matricula, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerClasesUsuario_call method_call = new obtenerClasesUsuario_call(matricula, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerClasesUsuario_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String matricula;
      public obtenerClasesUsuario_call(java.lang.String matricula, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matricula = matricula;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerClasesUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerClasesUsuario_args args = new obtenerClasesUsuario_args();
        args.setMatricula(matricula);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerClasesUsuario();
      }
    }

    public void obtenerMaestros(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerMaestros_call method_call = new obtenerMaestros_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerMaestros_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public obtenerMaestros_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerMaestros", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerMaestros_args args = new obtenerMaestros_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerMaestros();
      }
    }

    public void obtenerClases(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerClases_call method_call = new obtenerClases_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerClases_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public obtenerClases_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerClases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerClases_args args = new obtenerClases_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerClases();
      }
    }

    public void obtenerPeriodos(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerPeriodos_call method_call = new obtenerPeriodos_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerPeriodos_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public obtenerPeriodos_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerPeriodos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerPeriodos_args args = new obtenerPeriodos_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerPeriodos();
      }
    }

    public void registrarClase(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registrarClase_call method_call = new registrarClase_call(NRC, nombreClase, idPeriodo, numeroPersonalMaestro, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registrarClase_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String NRC;
      private java.lang.String nombreClase;
      private int idPeriodo;
      private java.lang.String numeroPersonalMaestro;
      public registrarClase_call(java.lang.String NRC, java.lang.String nombreClase, int idPeriodo, java.lang.String numeroPersonalMaestro, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.NRC = NRC;
        this.nombreClase = nombreClase;
        this.idPeriodo = idPeriodo;
        this.numeroPersonalMaestro = numeroPersonalMaestro;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registrarClase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registrarClase_args args = new registrarClase_args();
        args.setNRC(NRC);
        args.setNombreClase(nombreClase);
        args.setIdPeriodo(idPeriodo);
        args.setNumeroPersonalMaestro(numeroPersonalMaestro);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registrarClase();
      }
    }

    public void inscribirClase(java.lang.String matricula, java.lang.String NRC, java.lang.String rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inscribirClase_call method_call = new inscribirClase_call(matricula, NRC, rol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inscribirClase_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String matricula;
      private java.lang.String NRC;
      private java.lang.String rol;
      public inscribirClase_call(java.lang.String matricula, java.lang.String NRC, java.lang.String rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matricula = matricula;
        this.NRC = NRC;
        this.rol = rol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inscribirClase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inscribirClase_args args = new inscribirClase_args();
        args.setMatricula(matricula);
        args.setNRC(NRC);
        args.setRol(rol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inscribirClase();
      }
    }

    public void enviarMensaje(java.lang.String mensaje, java.lang.String clase, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enviarMensaje_call method_call = new enviarMensaje_call(mensaje, clase, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enviarMensaje_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String mensaje;
      private java.lang.String clase;
      public enviarMensaje_call(java.lang.String mensaje, java.lang.String clase, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mensaje = mensaje;
        this.clase = clase;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enviarMensaje", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enviarMensaje_args args = new enviarMensaje_args();
        args.setMensaje(mensaje);
        args.setClase(clase);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void recibirMensaje(java.lang.String mensaje, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recibirMensaje_call method_call = new recibirMensaje_call(mensaje, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recibirMensaje_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String mensaje;
      public recibirMensaje_call(java.lang.String mensaje, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mensaje = mensaje;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recibirMensaje", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recibirMensaje_args args = new recibirMensaje_args();
        args.setMensaje(mensaje);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void pedirParticipacion(java.lang.String nombre, java.lang.String ip, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pedirParticipacion_call method_call = new pedirParticipacion_call(nombre, ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pedirParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String nombre;
      private java.lang.String ip;
      public pedirParticipacion_call(java.lang.String nombre, java.lang.String ip, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pedirParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pedirParticipacion_args args = new pedirParticipacion_args();
        args.setNombre(nombre);
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mostrarSolicitudParticipacion(java.util.List<java.lang.String> datosAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mostrarSolicitudParticipacion_call method_call = new mostrarSolicitudParticipacion_call(datosAlumno, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mostrarSolicitudParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.String> datosAlumno;
      public mostrarSolicitudParticipacion_call(java.util.List<java.lang.String> datosAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datosAlumno = datosAlumno;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mostrarSolicitudParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mostrarSolicitudParticipacion_args args = new mostrarSolicitudParticipacion_args();
        args.setDatosAlumno(datosAlumno);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void otorgarParticipacion(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      otorgarParticipacion_call method_call = new otorgarParticipacion_call(ipAlumno, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class otorgarParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String ipAlumno;
      public otorgarParticipacion_call(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAlumno = ipAlumno;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("otorgarParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        otorgarParticipacion_args args = new otorgarParticipacion_args();
        args.setIpAlumno(ipAlumno);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mostrarParticipacion(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mostrarParticipacion_call method_call = new mostrarParticipacion_call(ipAlumno, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mostrarParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String ipAlumno;
      public mostrarParticipacion_call(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAlumno = ipAlumno;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mostrarParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mostrarParticipacion_args args = new mostrarParticipacion_args();
        args.setIpAlumno(ipAlumno);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void activarSolicitudParticipacion(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activarSolicitudParticipacion_call method_call = new activarSolicitudParticipacion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activarSolicitudParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public activarSolicitudParticipacion_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activarSolicitudParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activarSolicitudParticipacion_args args = new activarSolicitudParticipacion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void desactivarSolicitudParticipacion(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      desactivarSolicitudParticipacion_call method_call = new desactivarSolicitudParticipacion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class desactivarSolicitudParticipacion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public desactivarSolicitudParticipacion_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("desactivarSolicitudParticipacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        desactivarSolicitudParticipacion_args args = new desactivarSolicitudParticipacion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void pedirControl(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pedirControl_call method_call = new pedirControl_call(ipAlumno, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pedirControl_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String ipAlumno;
      public pedirControl_call(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAlumno = ipAlumno;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pedirControl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pedirControl_args args = new pedirControl_args();
        args.setIpAlumno(ipAlumno);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void obtenerControl(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerControl_call method_call = new obtenerControl_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerControl_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public obtenerControl_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerControl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerControl_args args = new obtenerControl_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void dejarControl(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dejarControl_call method_call = new dejarControl_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dejarControl_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public dejarControl_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dejarControl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dejarControl_args args = new dejarControl_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void recuperarControl(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarControl_call method_call = new recuperarControl_call(ipAlumno, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarControl_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String ipAlumno;
      public recuperarControl_call(java.lang.String ipAlumno, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAlumno = ipAlumno;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarControl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarControl_args args = new recuperarControl_args();
        args.setIpAlumno(ipAlumno);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void salirAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      salirAula_call method_call = new salirAula_call(nombre, ip, clase, rol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class salirAula_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String nombre;
      private java.lang.String ip;
      private java.lang.String clase;
      private int rol;
      public salirAula_call(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
        this.ip = ip;
        this.clase = clase;
        this.rol = rol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("salirAula", org.apache.thrift.protocol.TMessageType.CALL, 0));
        salirAula_args args = new salirAula_args();
        args.setNombre(nombre);
        args.setIp(ip);
        args.setClase(clase);
        args.setRol(rol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void entrarAula(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      entrarAula_call method_call = new entrarAula_call(nombre, ip, clase, rol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class entrarAula_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String nombre;
      private java.lang.String ip;
      private java.lang.String clase;
      private int rol;
      public entrarAula_call(java.lang.String nombre, java.lang.String ip, java.lang.String clase, int rol, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
        this.ip = ip;
        this.clase = clase;
        this.rol = rol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("entrarAula", org.apache.thrift.protocol.TMessageType.CALL, 0));
        entrarAula_args args = new entrarAula_args();
        args.setNombre(nombre);
        args.setIp(ip);
        args.setClase(clase);
        args.setRol(rol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void actualizarUsuariosConectados(java.util.List<java.lang.String> conectados, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarUsuariosConectados_call method_call = new actualizarUsuariosConectados_call(conectados, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarUsuariosConectados_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.String> conectados;
      public actualizarUsuariosConectados_call(java.util.List<java.lang.String> conectados, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.conectados = conectados;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarUsuariosConectados", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarUsuariosConectados_args args = new actualizarUsuariosConectados_args();
        args.setConectados(conectados);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void actualizarParticipantes(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarParticipantes_call method_call = new actualizarParticipantes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarParticipantes_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public actualizarParticipantes_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarParticipantes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarParticipantes_args args = new actualizarParticipantes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("iniciarSesion", new iniciarSesion());
      processMap.put("registrarse", new registrarse());
      processMap.put("obtenerClasesUsuario", new obtenerClasesUsuario());
      processMap.put("obtenerMaestros", new obtenerMaestros());
      processMap.put("obtenerClases", new obtenerClases());
      processMap.put("obtenerPeriodos", new obtenerPeriodos());
      processMap.put("registrarClase", new registrarClase());
      processMap.put("inscribirClase", new inscribirClase());
      processMap.put("enviarMensaje", new enviarMensaje());
      processMap.put("recibirMensaje", new recibirMensaje());
      processMap.put("pedirParticipacion", new pedirParticipacion());
      processMap.put("mostrarSolicitudParticipacion", new mostrarSolicitudParticipacion());
      processMap.put("otorgarParticipacion", new otorgarParticipacion());
      processMap.put("mostrarParticipacion", new mostrarParticipacion());
      processMap.put("activarSolicitudParticipacion", new activarSolicitudParticipacion());
      processMap.put("desactivarSolicitudParticipacion", new desactivarSolicitudParticipacion());
      processMap.put("pedirControl", new pedirControl());
      processMap.put("obtenerControl", new obtenerControl());
      processMap.put("dejarControl", new dejarControl());
      processMap.put("recuperarControl", new recuperarControl());
      processMap.put("salirAula", new salirAula());
      processMap.put("entrarAula", new entrarAula());
      processMap.put("actualizarUsuariosConectados", new actualizarUsuariosConectados());
      processMap.put("actualizarParticipantes", new actualizarParticipantes());
      return processMap;
    }

    public static class iniciarSesion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, iniciarSesion_args> {
      public iniciarSesion() {
        super("iniciarSesion");
      }

      public iniciarSesion_args getEmptyArgsInstance() {
        return new iniciarSesion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public iniciarSesion_result getResult(I iface, iniciarSesion_args args) throws org.apache.thrift.TException {
        iniciarSesion_result result = new iniciarSesion_result();
        result.success = iface.iniciarSesion(args.username, args.password);
        return result;
      }
    }

    public static class registrarse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registrarse_args> {
      public registrarse() {
        super("registrarse");
      }

      public registrarse_args getEmptyArgsInstance() {
        return new registrarse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registrarse_result getResult(I iface, registrarse_args args) throws org.apache.thrift.TException {
        registrarse_result result = new registrarse_result();
        result.success = iface.registrarse(args.matricula, args.nombre, args.apellidoPaterno, args.apellidoMaterno, args.correo, args.password, args.tipoUsuario);
        return result;
      }
    }

    public static class obtenerClasesUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerClasesUsuario_args> {
      public obtenerClasesUsuario() {
        super("obtenerClasesUsuario");
      }

      public obtenerClasesUsuario_args getEmptyArgsInstance() {
        return new obtenerClasesUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerClasesUsuario_result getResult(I iface, obtenerClasesUsuario_args args) throws org.apache.thrift.TException {
        obtenerClasesUsuario_result result = new obtenerClasesUsuario_result();
        result.success = iface.obtenerClasesUsuario(args.matricula);
        return result;
      }
    }

    public static class obtenerMaestros<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerMaestros_args> {
      public obtenerMaestros() {
        super("obtenerMaestros");
      }

      public obtenerMaestros_args getEmptyArgsInstance() {
        return new obtenerMaestros_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerMaestros_result getResult(I iface, obtenerMaestros_args args) throws org.apache.thrift.TException {
        obtenerMaestros_result result = new obtenerMaestros_result();
        result.success = iface.obtenerMaestros();
        return result;
      }
    }

    public static class obtenerClases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerClases_args> {
      public obtenerClases() {
        super("obtenerClases");
      }

      public obtenerClases_args getEmptyArgsInstance() {
        return new obtenerClases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerClases_result getResult(I iface, obtenerClases_args args) throws org.apache.thrift.TException {
        obtenerClases_result result = new obtenerClases_result();
        result.success = iface.obtenerClases();
        return result;
      }
    }

    public static class obtenerPeriodos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerPeriodos_args> {
      public obtenerPeriodos() {
        super("obtenerPeriodos");
      }

      public obtenerPeriodos_args getEmptyArgsInstance() {
        return new obtenerPeriodos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerPeriodos_result getResult(I iface, obtenerPeriodos_args args) throws org.apache.thrift.TException {
        obtenerPeriodos_result result = new obtenerPeriodos_result();
        result.success = iface.obtenerPeriodos();
        return result;
      }
    }

    public static class registrarClase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registrarClase_args> {
      public registrarClase() {
        super("registrarClase");
      }

      public registrarClase_args getEmptyArgsInstance() {
        return new registrarClase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registrarClase_result getResult(I iface, registrarClase_args args) throws org.apache.thrift.TException {
        registrarClase_result result = new registrarClase_result();
        result.success = iface.registrarClase(args.NRC, args.nombreClase, args.idPeriodo, args.numeroPersonalMaestro);
        return result;
      }
    }

    public static class inscribirClase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inscribirClase_args> {
      public inscribirClase() {
        super("inscribirClase");
      }

      public inscribirClase_args getEmptyArgsInstance() {
        return new inscribirClase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inscribirClase_result getResult(I iface, inscribirClase_args args) throws org.apache.thrift.TException {
        inscribirClase_result result = new inscribirClase_result();
        result.success = iface.inscribirClase(args.matricula, args.NRC, args.rol);
        return result;
      }
    }

    public static class enviarMensaje<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enviarMensaje_args> {
      public enviarMensaje() {
        super("enviarMensaje");
      }

      public enviarMensaje_args getEmptyArgsInstance() {
        return new enviarMensaje_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enviarMensaje_result getResult(I iface, enviarMensaje_args args) throws org.apache.thrift.TException {
        enviarMensaje_result result = new enviarMensaje_result();
        iface.enviarMensaje(args.mensaje, args.clase);
        return result;
      }
    }

    public static class recibirMensaje<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recibirMensaje_args> {
      public recibirMensaje() {
        super("recibirMensaje");
      }

      public recibirMensaje_args getEmptyArgsInstance() {
        return new recibirMensaje_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recibirMensaje_result getResult(I iface, recibirMensaje_args args) throws org.apache.thrift.TException {
        recibirMensaje_result result = new recibirMensaje_result();
        iface.recibirMensaje(args.mensaje);
        return result;
      }
    }

    public static class pedirParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pedirParticipacion_args> {
      public pedirParticipacion() {
        super("pedirParticipacion");
      }

      public pedirParticipacion_args getEmptyArgsInstance() {
        return new pedirParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pedirParticipacion_result getResult(I iface, pedirParticipacion_args args) throws org.apache.thrift.TException {
        pedirParticipacion_result result = new pedirParticipacion_result();
        iface.pedirParticipacion(args.nombre, args.ip);
        return result;
      }
    }

    public static class mostrarSolicitudParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mostrarSolicitudParticipacion_args> {
      public mostrarSolicitudParticipacion() {
        super("mostrarSolicitudParticipacion");
      }

      public mostrarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new mostrarSolicitudParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mostrarSolicitudParticipacion_result getResult(I iface, mostrarSolicitudParticipacion_args args) throws org.apache.thrift.TException {
        mostrarSolicitudParticipacion_result result = new mostrarSolicitudParticipacion_result();
        iface.mostrarSolicitudParticipacion(args.datosAlumno);
        return result;
      }
    }

    public static class otorgarParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, otorgarParticipacion_args> {
      public otorgarParticipacion() {
        super("otorgarParticipacion");
      }

      public otorgarParticipacion_args getEmptyArgsInstance() {
        return new otorgarParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public otorgarParticipacion_result getResult(I iface, otorgarParticipacion_args args) throws org.apache.thrift.TException {
        otorgarParticipacion_result result = new otorgarParticipacion_result();
        iface.otorgarParticipacion(args.ipAlumno);
        return result;
      }
    }

    public static class mostrarParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mostrarParticipacion_args> {
      public mostrarParticipacion() {
        super("mostrarParticipacion");
      }

      public mostrarParticipacion_args getEmptyArgsInstance() {
        return new mostrarParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mostrarParticipacion_result getResult(I iface, mostrarParticipacion_args args) throws org.apache.thrift.TException {
        mostrarParticipacion_result result = new mostrarParticipacion_result();
        iface.mostrarParticipacion(args.ipAlumno);
        return result;
      }
    }

    public static class activarSolicitudParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activarSolicitudParticipacion_args> {
      public activarSolicitudParticipacion() {
        super("activarSolicitudParticipacion");
      }

      public activarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new activarSolicitudParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activarSolicitudParticipacion_result getResult(I iface, activarSolicitudParticipacion_args args) throws org.apache.thrift.TException {
        activarSolicitudParticipacion_result result = new activarSolicitudParticipacion_result();
        iface.activarSolicitudParticipacion();
        return result;
      }
    }

    public static class desactivarSolicitudParticipacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, desactivarSolicitudParticipacion_args> {
      public desactivarSolicitudParticipacion() {
        super("desactivarSolicitudParticipacion");
      }

      public desactivarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new desactivarSolicitudParticipacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public desactivarSolicitudParticipacion_result getResult(I iface, desactivarSolicitudParticipacion_args args) throws org.apache.thrift.TException {
        desactivarSolicitudParticipacion_result result = new desactivarSolicitudParticipacion_result();
        iface.desactivarSolicitudParticipacion();
        return result;
      }
    }

    public static class pedirControl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pedirControl_args> {
      public pedirControl() {
        super("pedirControl");
      }

      public pedirControl_args getEmptyArgsInstance() {
        return new pedirControl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pedirControl_result getResult(I iface, pedirControl_args args) throws org.apache.thrift.TException {
        pedirControl_result result = new pedirControl_result();
        iface.pedirControl(args.ipAlumno);
        return result;
      }
    }

    public static class obtenerControl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerControl_args> {
      public obtenerControl() {
        super("obtenerControl");
      }

      public obtenerControl_args getEmptyArgsInstance() {
        return new obtenerControl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerControl_result getResult(I iface, obtenerControl_args args) throws org.apache.thrift.TException {
        obtenerControl_result result = new obtenerControl_result();
        iface.obtenerControl();
        return result;
      }
    }

    public static class dejarControl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dejarControl_args> {
      public dejarControl() {
        super("dejarControl");
      }

      public dejarControl_args getEmptyArgsInstance() {
        return new dejarControl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dejarControl_result getResult(I iface, dejarControl_args args) throws org.apache.thrift.TException {
        dejarControl_result result = new dejarControl_result();
        iface.dejarControl();
        return result;
      }
    }

    public static class recuperarControl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarControl_args> {
      public recuperarControl() {
        super("recuperarControl");
      }

      public recuperarControl_args getEmptyArgsInstance() {
        return new recuperarControl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recuperarControl_result getResult(I iface, recuperarControl_args args) throws org.apache.thrift.TException {
        recuperarControl_result result = new recuperarControl_result();
        iface.recuperarControl(args.ipAlumno);
        return result;
      }
    }

    public static class salirAula<I extends Iface> extends org.apache.thrift.ProcessFunction<I, salirAula_args> {
      public salirAula() {
        super("salirAula");
      }

      public salirAula_args getEmptyArgsInstance() {
        return new salirAula_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public salirAula_result getResult(I iface, salirAula_args args) throws org.apache.thrift.TException {
        salirAula_result result = new salirAula_result();
        iface.salirAula(args.nombre, args.ip, args.clase, args.rol);
        return result;
      }
    }

    public static class entrarAula<I extends Iface> extends org.apache.thrift.ProcessFunction<I, entrarAula_args> {
      public entrarAula() {
        super("entrarAula");
      }

      public entrarAula_args getEmptyArgsInstance() {
        return new entrarAula_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public entrarAula_result getResult(I iface, entrarAula_args args) throws org.apache.thrift.TException {
        entrarAula_result result = new entrarAula_result();
        iface.entrarAula(args.nombre, args.ip, args.clase, args.rol);
        return result;
      }
    }

    public static class actualizarUsuariosConectados<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarUsuariosConectados_args> {
      public actualizarUsuariosConectados() {
        super("actualizarUsuariosConectados");
      }

      public actualizarUsuariosConectados_args getEmptyArgsInstance() {
        return new actualizarUsuariosConectados_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public actualizarUsuariosConectados_result getResult(I iface, actualizarUsuariosConectados_args args) throws org.apache.thrift.TException {
        actualizarUsuariosConectados_result result = new actualizarUsuariosConectados_result();
        iface.actualizarUsuariosConectados(args.conectados);
        return result;
      }
    }

    public static class actualizarParticipantes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarParticipantes_args> {
      public actualizarParticipantes() {
        super("actualizarParticipantes");
      }

      public actualizarParticipantes_args getEmptyArgsInstance() {
        return new actualizarParticipantes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public actualizarParticipantes_result getResult(I iface, actualizarParticipantes_args args) throws org.apache.thrift.TException {
        actualizarParticipantes_result result = new actualizarParticipantes_result();
        iface.actualizarParticipantes();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("iniciarSesion", new iniciarSesion());
      processMap.put("registrarse", new registrarse());
      processMap.put("obtenerClasesUsuario", new obtenerClasesUsuario());
      processMap.put("obtenerMaestros", new obtenerMaestros());
      processMap.put("obtenerClases", new obtenerClases());
      processMap.put("obtenerPeriodos", new obtenerPeriodos());
      processMap.put("registrarClase", new registrarClase());
      processMap.put("inscribirClase", new inscribirClase());
      processMap.put("enviarMensaje", new enviarMensaje());
      processMap.put("recibirMensaje", new recibirMensaje());
      processMap.put("pedirParticipacion", new pedirParticipacion());
      processMap.put("mostrarSolicitudParticipacion", new mostrarSolicitudParticipacion());
      processMap.put("otorgarParticipacion", new otorgarParticipacion());
      processMap.put("mostrarParticipacion", new mostrarParticipacion());
      processMap.put("activarSolicitudParticipacion", new activarSolicitudParticipacion());
      processMap.put("desactivarSolicitudParticipacion", new desactivarSolicitudParticipacion());
      processMap.put("pedirControl", new pedirControl());
      processMap.put("obtenerControl", new obtenerControl());
      processMap.put("dejarControl", new dejarControl());
      processMap.put("recuperarControl", new recuperarControl());
      processMap.put("salirAula", new salirAula());
      processMap.put("entrarAula", new entrarAula());
      processMap.put("actualizarUsuariosConectados", new actualizarUsuariosConectados());
      processMap.put("actualizarParticipantes", new actualizarParticipantes());
      return processMap;
    }

    public static class iniciarSesion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, iniciarSesion_args, java.lang.String> {
      public iniciarSesion() {
        super("iniciarSesion");
      }

      public iniciarSesion_args getEmptyArgsInstance() {
        return new iniciarSesion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            iniciarSesion_result result = new iniciarSesion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            iniciarSesion_result result = new iniciarSesion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, iniciarSesion_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.iniciarSesion(args.username, args.password,resultHandler);
      }
    }

    public static class registrarse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registrarse_args, java.lang.String> {
      public registrarse() {
        super("registrarse");
      }

      public registrarse_args getEmptyArgsInstance() {
        return new registrarse_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            registrarse_result result = new registrarse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registrarse_result result = new registrarse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registrarse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.registrarse(args.matricula, args.nombre, args.apellidoPaterno, args.apellidoMaterno, args.correo, args.password, args.tipoUsuario,resultHandler);
      }
    }

    public static class obtenerClasesUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerClasesUsuario_args, java.util.List<java.lang.String>> {
      public obtenerClasesUsuario() {
        super("obtenerClasesUsuario");
      }

      public obtenerClasesUsuario_args getEmptyArgsInstance() {
        return new obtenerClasesUsuario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            obtenerClasesUsuario_result result = new obtenerClasesUsuario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerClasesUsuario_result result = new obtenerClasesUsuario_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerClasesUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerClasesUsuario(args.matricula,resultHandler);
      }
    }

    public static class obtenerMaestros<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerMaestros_args, java.util.List<java.lang.String>> {
      public obtenerMaestros() {
        super("obtenerMaestros");
      }

      public obtenerMaestros_args getEmptyArgsInstance() {
        return new obtenerMaestros_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            obtenerMaestros_result result = new obtenerMaestros_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerMaestros_result result = new obtenerMaestros_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerMaestros_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerMaestros(resultHandler);
      }
    }

    public static class obtenerClases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerClases_args, java.util.List<java.lang.String>> {
      public obtenerClases() {
        super("obtenerClases");
      }

      public obtenerClases_args getEmptyArgsInstance() {
        return new obtenerClases_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            obtenerClases_result result = new obtenerClases_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerClases_result result = new obtenerClases_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerClases_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerClases(resultHandler);
      }
    }

    public static class obtenerPeriodos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerPeriodos_args, java.util.List<java.lang.String>> {
      public obtenerPeriodos() {
        super("obtenerPeriodos");
      }

      public obtenerPeriodos_args getEmptyArgsInstance() {
        return new obtenerPeriodos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            obtenerPeriodos_result result = new obtenerPeriodos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerPeriodos_result result = new obtenerPeriodos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerPeriodos_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerPeriodos(resultHandler);
      }
    }

    public static class registrarClase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registrarClase_args, java.lang.String> {
      public registrarClase() {
        super("registrarClase");
      }

      public registrarClase_args getEmptyArgsInstance() {
        return new registrarClase_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            registrarClase_result result = new registrarClase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registrarClase_result result = new registrarClase_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registrarClase_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.registrarClase(args.NRC, args.nombreClase, args.idPeriodo, args.numeroPersonalMaestro,resultHandler);
      }
    }

    public static class inscribirClase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inscribirClase_args, java.lang.String> {
      public inscribirClase() {
        super("inscribirClase");
      }

      public inscribirClase_args getEmptyArgsInstance() {
        return new inscribirClase_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            inscribirClase_result result = new inscribirClase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            inscribirClase_result result = new inscribirClase_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inscribirClase_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.inscribirClase(args.matricula, args.NRC, args.rol,resultHandler);
      }
    }

    public static class enviarMensaje<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enviarMensaje_args, Void> {
      public enviarMensaje() {
        super("enviarMensaje");
      }

      public enviarMensaje_args getEmptyArgsInstance() {
        return new enviarMensaje_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            enviarMensaje_result result = new enviarMensaje_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            enviarMensaje_result result = new enviarMensaje_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enviarMensaje_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.enviarMensaje(args.mensaje, args.clase,resultHandler);
      }
    }

    public static class recibirMensaje<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recibirMensaje_args, Void> {
      public recibirMensaje() {
        super("recibirMensaje");
      }

      public recibirMensaje_args getEmptyArgsInstance() {
        return new recibirMensaje_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            recibirMensaje_result result = new recibirMensaje_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recibirMensaje_result result = new recibirMensaje_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recibirMensaje_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.recibirMensaje(args.mensaje,resultHandler);
      }
    }

    public static class pedirParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pedirParticipacion_args, Void> {
      public pedirParticipacion() {
        super("pedirParticipacion");
      }

      public pedirParticipacion_args getEmptyArgsInstance() {
        return new pedirParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pedirParticipacion_result result = new pedirParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pedirParticipacion_result result = new pedirParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pedirParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.pedirParticipacion(args.nombre, args.ip,resultHandler);
      }
    }

    public static class mostrarSolicitudParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mostrarSolicitudParticipacion_args, Void> {
      public mostrarSolicitudParticipacion() {
        super("mostrarSolicitudParticipacion");
      }

      public mostrarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new mostrarSolicitudParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mostrarSolicitudParticipacion_result result = new mostrarSolicitudParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mostrarSolicitudParticipacion_result result = new mostrarSolicitudParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mostrarSolicitudParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mostrarSolicitudParticipacion(args.datosAlumno,resultHandler);
      }
    }

    public static class otorgarParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, otorgarParticipacion_args, Void> {
      public otorgarParticipacion() {
        super("otorgarParticipacion");
      }

      public otorgarParticipacion_args getEmptyArgsInstance() {
        return new otorgarParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            otorgarParticipacion_result result = new otorgarParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            otorgarParticipacion_result result = new otorgarParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, otorgarParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.otorgarParticipacion(args.ipAlumno,resultHandler);
      }
    }

    public static class mostrarParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mostrarParticipacion_args, Void> {
      public mostrarParticipacion() {
        super("mostrarParticipacion");
      }

      public mostrarParticipacion_args getEmptyArgsInstance() {
        return new mostrarParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mostrarParticipacion_result result = new mostrarParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mostrarParticipacion_result result = new mostrarParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mostrarParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mostrarParticipacion(args.ipAlumno,resultHandler);
      }
    }

    public static class activarSolicitudParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activarSolicitudParticipacion_args, Void> {
      public activarSolicitudParticipacion() {
        super("activarSolicitudParticipacion");
      }

      public activarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new activarSolicitudParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            activarSolicitudParticipacion_result result = new activarSolicitudParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            activarSolicitudParticipacion_result result = new activarSolicitudParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activarSolicitudParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.activarSolicitudParticipacion(resultHandler);
      }
    }

    public static class desactivarSolicitudParticipacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, desactivarSolicitudParticipacion_args, Void> {
      public desactivarSolicitudParticipacion() {
        super("desactivarSolicitudParticipacion");
      }

      public desactivarSolicitudParticipacion_args getEmptyArgsInstance() {
        return new desactivarSolicitudParticipacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            desactivarSolicitudParticipacion_result result = new desactivarSolicitudParticipacion_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            desactivarSolicitudParticipacion_result result = new desactivarSolicitudParticipacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, desactivarSolicitudParticipacion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.desactivarSolicitudParticipacion(resultHandler);
      }
    }

    public static class pedirControl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pedirControl_args, Void> {
      public pedirControl() {
        super("pedirControl");
      }

      public pedirControl_args getEmptyArgsInstance() {
        return new pedirControl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pedirControl_result result = new pedirControl_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pedirControl_result result = new pedirControl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pedirControl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.pedirControl(args.ipAlumno,resultHandler);
      }
    }

    public static class obtenerControl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerControl_args, Void> {
      public obtenerControl() {
        super("obtenerControl");
      }

      public obtenerControl_args getEmptyArgsInstance() {
        return new obtenerControl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            obtenerControl_result result = new obtenerControl_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerControl_result result = new obtenerControl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerControl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerControl(resultHandler);
      }
    }

    public static class dejarControl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dejarControl_args, Void> {
      public dejarControl() {
        super("dejarControl");
      }

      public dejarControl_args getEmptyArgsInstance() {
        return new dejarControl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dejarControl_result result = new dejarControl_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dejarControl_result result = new dejarControl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dejarControl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.dejarControl(resultHandler);
      }
    }

    public static class recuperarControl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarControl_args, Void> {
      public recuperarControl() {
        super("recuperarControl");
      }

      public recuperarControl_args getEmptyArgsInstance() {
        return new recuperarControl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            recuperarControl_result result = new recuperarControl_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarControl_result result = new recuperarControl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarControl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarControl(args.ipAlumno,resultHandler);
      }
    }

    public static class salirAula<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, salirAula_args, Void> {
      public salirAula() {
        super("salirAula");
      }

      public salirAula_args getEmptyArgsInstance() {
        return new salirAula_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            salirAula_result result = new salirAula_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            salirAula_result result = new salirAula_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, salirAula_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.salirAula(args.nombre, args.ip, args.clase, args.rol,resultHandler);
      }
    }

    public static class entrarAula<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, entrarAula_args, Void> {
      public entrarAula() {
        super("entrarAula");
      }

      public entrarAula_args getEmptyArgsInstance() {
        return new entrarAula_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            entrarAula_result result = new entrarAula_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            entrarAula_result result = new entrarAula_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, entrarAula_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.entrarAula(args.nombre, args.ip, args.clase, args.rol,resultHandler);
      }
    }

    public static class actualizarUsuariosConectados<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarUsuariosConectados_args, Void> {
      public actualizarUsuariosConectados() {
        super("actualizarUsuariosConectados");
      }

      public actualizarUsuariosConectados_args getEmptyArgsInstance() {
        return new actualizarUsuariosConectados_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            actualizarUsuariosConectados_result result = new actualizarUsuariosConectados_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            actualizarUsuariosConectados_result result = new actualizarUsuariosConectados_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarUsuariosConectados_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.actualizarUsuariosConectados(args.conectados,resultHandler);
      }
    }

    public static class actualizarParticipantes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarParticipantes_args, Void> {
      public actualizarParticipantes() {
        super("actualizarParticipantes");
      }

      public actualizarParticipantes_args getEmptyArgsInstance() {
        return new actualizarParticipantes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            actualizarParticipantes_result result = new actualizarParticipantes_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            actualizarParticipantes_result result = new actualizarParticipantes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarParticipantes_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.actualizarParticipantes(resultHandler);
      }
    }

  }

  public static class iniciarSesion_args implements org.apache.thrift.TBase<iniciarSesion_args, iniciarSesion_args._Fields>, java.io.Serializable, Cloneable, Comparable<iniciarSesion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iniciarSesion_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new iniciarSesion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new iniciarSesion_argsTupleSchemeFactory();

    public java.lang.String username; // required
    public java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iniciarSesion_args.class, metaDataMap);
    }

    public iniciarSesion_args() {
    }

    public iniciarSesion_args(
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iniciarSesion_args(iniciarSesion_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public iniciarSesion_args deepCopy() {
      return new iniciarSesion_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public iniciarSesion_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public iniciarSesion_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof iniciarSesion_args)
        return this.equals((iniciarSesion_args)that);
      return false;
    }

    public boolean equals(iniciarSesion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(iniciarSesion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("iniciarSesion_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iniciarSesion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public iniciarSesion_argsStandardScheme getScheme() {
        return new iniciarSesion_argsStandardScheme();
      }
    }

    private static class iniciarSesion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<iniciarSesion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iniciarSesion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iniciarSesion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public iniciarSesion_argsTupleScheme getScheme() {
        return new iniciarSesion_argsTupleScheme();
      }
    }

    private static class iniciarSesion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<iniciarSesion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class iniciarSesion_result implements org.apache.thrift.TBase<iniciarSesion_result, iniciarSesion_result._Fields>, java.io.Serializable, Cloneable, Comparable<iniciarSesion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iniciarSesion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new iniciarSesion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new iniciarSesion_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iniciarSesion_result.class, metaDataMap);
    }

    public iniciarSesion_result() {
    }

    public iniciarSesion_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iniciarSesion_result(iniciarSesion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public iniciarSesion_result deepCopy() {
      return new iniciarSesion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public iniciarSesion_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof iniciarSesion_result)
        return this.equals((iniciarSesion_result)that);
      return false;
    }

    public boolean equals(iniciarSesion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(iniciarSesion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("iniciarSesion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iniciarSesion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public iniciarSesion_resultStandardScheme getScheme() {
        return new iniciarSesion_resultStandardScheme();
      }
    }

    private static class iniciarSesion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<iniciarSesion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iniciarSesion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iniciarSesion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public iniciarSesion_resultTupleScheme getScheme() {
        return new iniciarSesion_resultTupleScheme();
      }
    }

    private static class iniciarSesion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<iniciarSesion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarse_args implements org.apache.thrift.TBase<registrarse_args, registrarse_args._Fields>, java.io.Serializable, Cloneable, Comparable<registrarse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarse_args");

    private static final org.apache.thrift.protocol.TField MATRICULA_FIELD_DESC = new org.apache.thrift.protocol.TField("matricula", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APELLIDO_PATERNO_FIELD_DESC = new org.apache.thrift.protocol.TField("apellidoPaterno", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField APELLIDO_MATERNO_FIELD_DESC = new org.apache.thrift.protocol.TField("apellidoMaterno", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField TIPO_USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoUsuario", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarse_argsTupleSchemeFactory();

    public java.lang.String matricula; // required
    public java.lang.String nombre; // required
    public java.lang.String apellidoPaterno; // required
    public java.lang.String apellidoMaterno; // required
    public java.lang.String correo; // required
    public java.lang.String password; // required
    public int tipoUsuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATRICULA((short)1, "matricula"),
      NOMBRE((short)2, "nombre"),
      APELLIDO_PATERNO((short)3, "apellidoPaterno"),
      APELLIDO_MATERNO((short)4, "apellidoMaterno"),
      CORREO((short)5, "correo"),
      PASSWORD((short)6, "password"),
      TIPO_USUARIO((short)7, "tipoUsuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATRICULA
            return MATRICULA;
          case 2: // NOMBRE
            return NOMBRE;
          case 3: // APELLIDO_PATERNO
            return APELLIDO_PATERNO;
          case 4: // APELLIDO_MATERNO
            return APELLIDO_MATERNO;
          case 5: // CORREO
            return CORREO;
          case 6: // PASSWORD
            return PASSWORD;
          case 7: // TIPO_USUARIO
            return TIPO_USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIPOUSUARIO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATRICULA, new org.apache.thrift.meta_data.FieldMetaData("matricula", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APELLIDO_PATERNO, new org.apache.thrift.meta_data.FieldMetaData("apellidoPaterno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APELLIDO_MATERNO, new org.apache.thrift.meta_data.FieldMetaData("apellidoMaterno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIPO_USUARIO, new org.apache.thrift.meta_data.FieldMetaData("tipoUsuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarse_args.class, metaDataMap);
    }

    public registrarse_args() {
    }

    public registrarse_args(
      java.lang.String matricula,
      java.lang.String nombre,
      java.lang.String apellidoPaterno,
      java.lang.String apellidoMaterno,
      java.lang.String correo,
      java.lang.String password,
      int tipoUsuario)
    {
      this();
      this.matricula = matricula;
      this.nombre = nombre;
      this.apellidoPaterno = apellidoPaterno;
      this.apellidoMaterno = apellidoMaterno;
      this.correo = correo;
      this.password = password;
      this.tipoUsuario = tipoUsuario;
      setTipoUsuarioIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarse_args(registrarse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMatricula()) {
        this.matricula = other.matricula;
      }
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetApellidoPaterno()) {
        this.apellidoPaterno = other.apellidoPaterno;
      }
      if (other.isSetApellidoMaterno()) {
        this.apellidoMaterno = other.apellidoMaterno;
      }
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.tipoUsuario = other.tipoUsuario;
    }

    public registrarse_args deepCopy() {
      return new registrarse_args(this);
    }

    @Override
    public void clear() {
      this.matricula = null;
      this.nombre = null;
      this.apellidoPaterno = null;
      this.apellidoMaterno = null;
      this.correo = null;
      this.password = null;
      setTipoUsuarioIsSet(false);
      this.tipoUsuario = 0;
    }

    public java.lang.String getMatricula() {
      return this.matricula;
    }

    public registrarse_args setMatricula(java.lang.String matricula) {
      this.matricula = matricula;
      return this;
    }

    public void unsetMatricula() {
      this.matricula = null;
    }

    /** Returns true if field matricula is set (has been assigned a value) and false otherwise */
    public boolean isSetMatricula() {
      return this.matricula != null;
    }

    public void setMatriculaIsSet(boolean value) {
      if (!value) {
        this.matricula = null;
      }
    }

    public java.lang.String getNombre() {
      return this.nombre;
    }

    public registrarse_args setNombre(java.lang.String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public java.lang.String getApellidoPaterno() {
      return this.apellidoPaterno;
    }

    public registrarse_args setApellidoPaterno(java.lang.String apellidoPaterno) {
      this.apellidoPaterno = apellidoPaterno;
      return this;
    }

    public void unsetApellidoPaterno() {
      this.apellidoPaterno = null;
    }

    /** Returns true if field apellidoPaterno is set (has been assigned a value) and false otherwise */
    public boolean isSetApellidoPaterno() {
      return this.apellidoPaterno != null;
    }

    public void setApellidoPaternoIsSet(boolean value) {
      if (!value) {
        this.apellidoPaterno = null;
      }
    }

    public java.lang.String getApellidoMaterno() {
      return this.apellidoMaterno;
    }

    public registrarse_args setApellidoMaterno(java.lang.String apellidoMaterno) {
      this.apellidoMaterno = apellidoMaterno;
      return this;
    }

    public void unsetApellidoMaterno() {
      this.apellidoMaterno = null;
    }

    /** Returns true if field apellidoMaterno is set (has been assigned a value) and false otherwise */
    public boolean isSetApellidoMaterno() {
      return this.apellidoMaterno != null;
    }

    public void setApellidoMaternoIsSet(boolean value) {
      if (!value) {
        this.apellidoMaterno = null;
      }
    }

    public java.lang.String getCorreo() {
      return this.correo;
    }

    public registrarse_args setCorreo(java.lang.String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public registrarse_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public int getTipoUsuario() {
      return this.tipoUsuario;
    }

    public registrarse_args setTipoUsuario(int tipoUsuario) {
      this.tipoUsuario = tipoUsuario;
      setTipoUsuarioIsSet(true);
      return this;
    }

    public void unsetTipoUsuario() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIPOUSUARIO_ISSET_ID);
    }

    /** Returns true if field tipoUsuario is set (has been assigned a value) and false otherwise */
    public boolean isSetTipoUsuario() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIPOUSUARIO_ISSET_ID);
    }

    public void setTipoUsuarioIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIPOUSUARIO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MATRICULA:
        if (value == null) {
          unsetMatricula();
        } else {
          setMatricula((java.lang.String)value);
        }
        break;

      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((java.lang.String)value);
        }
        break;

      case APELLIDO_PATERNO:
        if (value == null) {
          unsetApellidoPaterno();
        } else {
          setApellidoPaterno((java.lang.String)value);
        }
        break;

      case APELLIDO_MATERNO:
        if (value == null) {
          unsetApellidoMaterno();
        } else {
          setApellidoMaterno((java.lang.String)value);
        }
        break;

      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TIPO_USUARIO:
        if (value == null) {
          unsetTipoUsuario();
        } else {
          setTipoUsuario((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MATRICULA:
        return getMatricula();

      case NOMBRE:
        return getNombre();

      case APELLIDO_PATERNO:
        return getApellidoPaterno();

      case APELLIDO_MATERNO:
        return getApellidoMaterno();

      case CORREO:
        return getCorreo();

      case PASSWORD:
        return getPassword();

      case TIPO_USUARIO:
        return getTipoUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MATRICULA:
        return isSetMatricula();
      case NOMBRE:
        return isSetNombre();
      case APELLIDO_PATERNO:
        return isSetApellidoPaterno();
      case APELLIDO_MATERNO:
        return isSetApellidoMaterno();
      case CORREO:
        return isSetCorreo();
      case PASSWORD:
        return isSetPassword();
      case TIPO_USUARIO:
        return isSetTipoUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarse_args)
        return this.equals((registrarse_args)that);
      return false;
    }

    public boolean equals(registrarse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_matricula = true && this.isSetMatricula();
      boolean that_present_matricula = true && that.isSetMatricula();
      if (this_present_matricula || that_present_matricula) {
        if (!(this_present_matricula && that_present_matricula))
          return false;
        if (!this.matricula.equals(that.matricula))
          return false;
      }

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_apellidoPaterno = true && this.isSetApellidoPaterno();
      boolean that_present_apellidoPaterno = true && that.isSetApellidoPaterno();
      if (this_present_apellidoPaterno || that_present_apellidoPaterno) {
        if (!(this_present_apellidoPaterno && that_present_apellidoPaterno))
          return false;
        if (!this.apellidoPaterno.equals(that.apellidoPaterno))
          return false;
      }

      boolean this_present_apellidoMaterno = true && this.isSetApellidoMaterno();
      boolean that_present_apellidoMaterno = true && that.isSetApellidoMaterno();
      if (this_present_apellidoMaterno || that_present_apellidoMaterno) {
        if (!(this_present_apellidoMaterno && that_present_apellidoMaterno))
          return false;
        if (!this.apellidoMaterno.equals(that.apellidoMaterno))
          return false;
      }

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_tipoUsuario = true;
      boolean that_present_tipoUsuario = true;
      if (this_present_tipoUsuario || that_present_tipoUsuario) {
        if (!(this_present_tipoUsuario && that_present_tipoUsuario))
          return false;
        if (this.tipoUsuario != that.tipoUsuario)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMatricula()) ? 131071 : 524287);
      if (isSetMatricula())
        hashCode = hashCode * 8191 + matricula.hashCode();

      hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
      if (isSetNombre())
        hashCode = hashCode * 8191 + nombre.hashCode();

      hashCode = hashCode * 8191 + ((isSetApellidoPaterno()) ? 131071 : 524287);
      if (isSetApellidoPaterno())
        hashCode = hashCode * 8191 + apellidoPaterno.hashCode();

      hashCode = hashCode * 8191 + ((isSetApellidoMaterno()) ? 131071 : 524287);
      if (isSetApellidoMaterno())
        hashCode = hashCode * 8191 + apellidoMaterno.hashCode();

      hashCode = hashCode * 8191 + ((isSetCorreo()) ? 131071 : 524287);
      if (isSetCorreo())
        hashCode = hashCode * 8191 + correo.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + tipoUsuario;

      return hashCode;
    }

    @Override
    public int compareTo(registrarse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMatricula()).compareTo(other.isSetMatricula());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatricula()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matricula, other.matricula);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApellidoPaterno()).compareTo(other.isSetApellidoPaterno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApellidoPaterno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apellidoPaterno, other.apellidoPaterno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApellidoMaterno()).compareTo(other.isSetApellidoMaterno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApellidoMaterno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apellidoMaterno, other.apellidoMaterno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTipoUsuario()).compareTo(other.isSetTipoUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTipoUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoUsuario, other.tipoUsuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarse_args(");
      boolean first = true;

      sb.append("matricula:");
      if (this.matricula == null) {
        sb.append("null");
      } else {
        sb.append(this.matricula);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apellidoPaterno:");
      if (this.apellidoPaterno == null) {
        sb.append("null");
      } else {
        sb.append(this.apellidoPaterno);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apellidoMaterno:");
      if (this.apellidoMaterno == null) {
        sb.append("null");
      } else {
        sb.append(this.apellidoMaterno);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tipoUsuario:");
      sb.append(this.tipoUsuario);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarse_argsStandardScheme getScheme() {
        return new registrarse_argsStandardScheme();
      }
    }

    private static class registrarse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATRICULA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.matricula = iprot.readString();
                struct.setMatriculaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APELLIDO_PATERNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apellidoPaterno = iprot.readString();
                struct.setApellidoPaternoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // APELLIDO_MATERNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apellidoMaterno = iprot.readString();
                struct.setApellidoMaternoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TIPO_USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tipoUsuario = iprot.readI32();
                struct.setTipoUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matricula != null) {
          oprot.writeFieldBegin(MATRICULA_FIELD_DESC);
          oprot.writeString(struct.matricula);
          oprot.writeFieldEnd();
        }
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.apellidoPaterno != null) {
          oprot.writeFieldBegin(APELLIDO_PATERNO_FIELD_DESC);
          oprot.writeString(struct.apellidoPaterno);
          oprot.writeFieldEnd();
        }
        if (struct.apellidoMaterno != null) {
          oprot.writeFieldBegin(APELLIDO_MATERNO_FIELD_DESC);
          oprot.writeString(struct.apellidoMaterno);
          oprot.writeFieldEnd();
        }
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIPO_USUARIO_FIELD_DESC);
        oprot.writeI32(struct.tipoUsuario);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarse_argsTupleScheme getScheme() {
        return new registrarse_argsTupleScheme();
      }
    }

    private static class registrarse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMatricula()) {
          optionals.set(0);
        }
        if (struct.isSetNombre()) {
          optionals.set(1);
        }
        if (struct.isSetApellidoPaterno()) {
          optionals.set(2);
        }
        if (struct.isSetApellidoMaterno()) {
          optionals.set(3);
        }
        if (struct.isSetCorreo()) {
          optionals.set(4);
        }
        if (struct.isSetPassword()) {
          optionals.set(5);
        }
        if (struct.isSetTipoUsuario()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetMatricula()) {
          oprot.writeString(struct.matricula);
        }
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetApellidoPaterno()) {
          oprot.writeString(struct.apellidoPaterno);
        }
        if (struct.isSetApellidoMaterno()) {
          oprot.writeString(struct.apellidoMaterno);
        }
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTipoUsuario()) {
          oprot.writeI32(struct.tipoUsuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.matricula = iprot.readString();
          struct.setMatriculaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apellidoPaterno = iprot.readString();
          struct.setApellidoPaternoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.apellidoMaterno = iprot.readString();
          struct.setApellidoMaternoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
        if (incoming.get(5)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(6)) {
          struct.tipoUsuario = iprot.readI32();
          struct.setTipoUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarse_result implements org.apache.thrift.TBase<registrarse_result, registrarse_result._Fields>, java.io.Serializable, Cloneable, Comparable<registrarse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarse_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarse_result.class, metaDataMap);
    }

    public registrarse_result() {
    }

    public registrarse_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarse_result(registrarse_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public registrarse_result deepCopy() {
      return new registrarse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public registrarse_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarse_result)
        return this.equals((registrarse_result)that);
      return false;
    }

    public boolean equals(registrarse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarse_resultStandardScheme getScheme() {
        return new registrarse_resultStandardScheme();
      }
    }

    private static class registrarse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarse_resultTupleScheme getScheme() {
        return new registrarse_resultTupleScheme();
      }
    }

    private static class registrarse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerClasesUsuario_args implements org.apache.thrift.TBase<obtenerClasesUsuario_args, obtenerClasesUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerClasesUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerClasesUsuario_args");

    private static final org.apache.thrift.protocol.TField MATRICULA_FIELD_DESC = new org.apache.thrift.protocol.TField("matricula", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerClasesUsuario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerClasesUsuario_argsTupleSchemeFactory();

    public java.lang.String matricula; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATRICULA((short)1, "matricula");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATRICULA
            return MATRICULA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATRICULA, new org.apache.thrift.meta_data.FieldMetaData("matricula", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerClasesUsuario_args.class, metaDataMap);
    }

    public obtenerClasesUsuario_args() {
    }

    public obtenerClasesUsuario_args(
      java.lang.String matricula)
    {
      this();
      this.matricula = matricula;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerClasesUsuario_args(obtenerClasesUsuario_args other) {
      if (other.isSetMatricula()) {
        this.matricula = other.matricula;
      }
    }

    public obtenerClasesUsuario_args deepCopy() {
      return new obtenerClasesUsuario_args(this);
    }

    @Override
    public void clear() {
      this.matricula = null;
    }

    public java.lang.String getMatricula() {
      return this.matricula;
    }

    public obtenerClasesUsuario_args setMatricula(java.lang.String matricula) {
      this.matricula = matricula;
      return this;
    }

    public void unsetMatricula() {
      this.matricula = null;
    }

    /** Returns true if field matricula is set (has been assigned a value) and false otherwise */
    public boolean isSetMatricula() {
      return this.matricula != null;
    }

    public void setMatriculaIsSet(boolean value) {
      if (!value) {
        this.matricula = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MATRICULA:
        if (value == null) {
          unsetMatricula();
        } else {
          setMatricula((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MATRICULA:
        return getMatricula();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MATRICULA:
        return isSetMatricula();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerClasesUsuario_args)
        return this.equals((obtenerClasesUsuario_args)that);
      return false;
    }

    public boolean equals(obtenerClasesUsuario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_matricula = true && this.isSetMatricula();
      boolean that_present_matricula = true && that.isSetMatricula();
      if (this_present_matricula || that_present_matricula) {
        if (!(this_present_matricula && that_present_matricula))
          return false;
        if (!this.matricula.equals(that.matricula))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMatricula()) ? 131071 : 524287);
      if (isSetMatricula())
        hashCode = hashCode * 8191 + matricula.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerClasesUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMatricula()).compareTo(other.isSetMatricula());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatricula()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matricula, other.matricula);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerClasesUsuario_args(");
      boolean first = true;

      sb.append("matricula:");
      if (this.matricula == null) {
        sb.append("null");
      } else {
        sb.append(this.matricula);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerClasesUsuario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClasesUsuario_argsStandardScheme getScheme() {
        return new obtenerClasesUsuario_argsStandardScheme();
      }
    }

    private static class obtenerClasesUsuario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerClasesUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerClasesUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATRICULA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.matricula = iprot.readString();
                struct.setMatriculaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerClasesUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matricula != null) {
          oprot.writeFieldBegin(MATRICULA_FIELD_DESC);
          oprot.writeString(struct.matricula);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerClasesUsuario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClasesUsuario_argsTupleScheme getScheme() {
        return new obtenerClasesUsuario_argsTupleScheme();
      }
    }

    private static class obtenerClasesUsuario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerClasesUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerClasesUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMatricula()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatricula()) {
          oprot.writeString(struct.matricula);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerClasesUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.matricula = iprot.readString();
          struct.setMatriculaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerClasesUsuario_result implements org.apache.thrift.TBase<obtenerClasesUsuario_result, obtenerClasesUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerClasesUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerClasesUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerClasesUsuario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerClasesUsuario_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerClasesUsuario_result.class, metaDataMap);
    }

    public obtenerClasesUsuario_result() {
    }

    public obtenerClasesUsuario_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerClasesUsuario_result(obtenerClasesUsuario_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public obtenerClasesUsuario_result deepCopy() {
      return new obtenerClasesUsuario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public obtenerClasesUsuario_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerClasesUsuario_result)
        return this.equals((obtenerClasesUsuario_result)that);
      return false;
    }

    public boolean equals(obtenerClasesUsuario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerClasesUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerClasesUsuario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerClasesUsuario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClasesUsuario_resultStandardScheme getScheme() {
        return new obtenerClasesUsuario_resultStandardScheme();
      }
    }

    private static class obtenerClasesUsuario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerClasesUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerClasesUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerClasesUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerClasesUsuario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClasesUsuario_resultTupleScheme getScheme() {
        return new obtenerClasesUsuario_resultTupleScheme();
      }
    }

    private static class obtenerClasesUsuario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerClasesUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerClasesUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerClasesUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerMaestros_args implements org.apache.thrift.TBase<obtenerMaestros_args, obtenerMaestros_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerMaestros_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerMaestros_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerMaestros_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerMaestros_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerMaestros_args.class, metaDataMap);
    }

    public obtenerMaestros_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerMaestros_args(obtenerMaestros_args other) {
    }

    public obtenerMaestros_args deepCopy() {
      return new obtenerMaestros_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerMaestros_args)
        return this.equals((obtenerMaestros_args)that);
      return false;
    }

    public boolean equals(obtenerMaestros_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtenerMaestros_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerMaestros_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerMaestros_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerMaestros_argsStandardScheme getScheme() {
        return new obtenerMaestros_argsStandardScheme();
      }
    }

    private static class obtenerMaestros_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerMaestros_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerMaestros_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerMaestros_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerMaestros_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerMaestros_argsTupleScheme getScheme() {
        return new obtenerMaestros_argsTupleScheme();
      }
    }

    private static class obtenerMaestros_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerMaestros_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerMaestros_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerMaestros_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerMaestros_result implements org.apache.thrift.TBase<obtenerMaestros_result, obtenerMaestros_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerMaestros_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerMaestros_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerMaestros_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerMaestros_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerMaestros_result.class, metaDataMap);
    }

    public obtenerMaestros_result() {
    }

    public obtenerMaestros_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerMaestros_result(obtenerMaestros_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public obtenerMaestros_result deepCopy() {
      return new obtenerMaestros_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public obtenerMaestros_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerMaestros_result)
        return this.equals((obtenerMaestros_result)that);
      return false;
    }

    public boolean equals(obtenerMaestros_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerMaestros_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerMaestros_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerMaestros_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerMaestros_resultStandardScheme getScheme() {
        return new obtenerMaestros_resultStandardScheme();
      }
    }

    private static class obtenerMaestros_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerMaestros_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerMaestros_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerMaestros_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerMaestros_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerMaestros_resultTupleScheme getScheme() {
        return new obtenerMaestros_resultTupleScheme();
      }
    }

    private static class obtenerMaestros_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerMaestros_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerMaestros_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerMaestros_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerClases_args implements org.apache.thrift.TBase<obtenerClases_args, obtenerClases_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerClases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerClases_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerClases_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerClases_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerClases_args.class, metaDataMap);
    }

    public obtenerClases_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerClases_args(obtenerClases_args other) {
    }

    public obtenerClases_args deepCopy() {
      return new obtenerClases_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerClases_args)
        return this.equals((obtenerClases_args)that);
      return false;
    }

    public boolean equals(obtenerClases_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtenerClases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerClases_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerClases_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClases_argsStandardScheme getScheme() {
        return new obtenerClases_argsStandardScheme();
      }
    }

    private static class obtenerClases_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerClases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerClases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerClases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerClases_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClases_argsTupleScheme getScheme() {
        return new obtenerClases_argsTupleScheme();
      }
    }

    private static class obtenerClases_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerClases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerClases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerClases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerClases_result implements org.apache.thrift.TBase<obtenerClases_result, obtenerClases_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerClases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerClases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerClases_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerClases_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerClases_result.class, metaDataMap);
    }

    public obtenerClases_result() {
    }

    public obtenerClases_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerClases_result(obtenerClases_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public obtenerClases_result deepCopy() {
      return new obtenerClases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public obtenerClases_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerClases_result)
        return this.equals((obtenerClases_result)that);
      return false;
    }

    public boolean equals(obtenerClases_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerClases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerClases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerClases_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClases_resultStandardScheme getScheme() {
        return new obtenerClases_resultStandardScheme();
      }
    }

    private static class obtenerClases_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerClases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerClases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list16.size);
                  java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerClases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerClases_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerClases_resultTupleScheme getScheme() {
        return new obtenerClases_resultTupleScheme();
      }
    }

    private static class obtenerClases_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerClases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerClases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerClases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list21.size);
            java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerPeriodos_args implements org.apache.thrift.TBase<obtenerPeriodos_args, obtenerPeriodos_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerPeriodos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerPeriodos_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerPeriodos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerPeriodos_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerPeriodos_args.class, metaDataMap);
    }

    public obtenerPeriodos_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerPeriodos_args(obtenerPeriodos_args other) {
    }

    public obtenerPeriodos_args deepCopy() {
      return new obtenerPeriodos_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerPeriodos_args)
        return this.equals((obtenerPeriodos_args)that);
      return false;
    }

    public boolean equals(obtenerPeriodos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtenerPeriodos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerPeriodos_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerPeriodos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerPeriodos_argsStandardScheme getScheme() {
        return new obtenerPeriodos_argsStandardScheme();
      }
    }

    private static class obtenerPeriodos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerPeriodos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerPeriodos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerPeriodos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerPeriodos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerPeriodos_argsTupleScheme getScheme() {
        return new obtenerPeriodos_argsTupleScheme();
      }
    }

    private static class obtenerPeriodos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerPeriodos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerPeriodos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerPeriodos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerPeriodos_result implements org.apache.thrift.TBase<obtenerPeriodos_result, obtenerPeriodos_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerPeriodos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerPeriodos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerPeriodos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerPeriodos_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerPeriodos_result.class, metaDataMap);
    }

    public obtenerPeriodos_result() {
    }

    public obtenerPeriodos_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerPeriodos_result(obtenerPeriodos_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public obtenerPeriodos_result deepCopy() {
      return new obtenerPeriodos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public obtenerPeriodos_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerPeriodos_result)
        return this.equals((obtenerPeriodos_result)that);
      return false;
    }

    public boolean equals(obtenerPeriodos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerPeriodos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerPeriodos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerPeriodos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerPeriodos_resultStandardScheme getScheme() {
        return new obtenerPeriodos_resultStandardScheme();
      }
    }

    private static class obtenerPeriodos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerPeriodos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerPeriodos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list24.size);
                  java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerPeriodos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerPeriodos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerPeriodos_resultTupleScheme getScheme() {
        return new obtenerPeriodos_resultTupleScheme();
      }
    }

    private static class obtenerPeriodos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerPeriodos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerPeriodos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerPeriodos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list29.size);
            java.lang.String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarClase_args implements org.apache.thrift.TBase<registrarClase_args, registrarClase_args._Fields>, java.io.Serializable, Cloneable, Comparable<registrarClase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarClase_args");

    private static final org.apache.thrift.protocol.TField NRC_FIELD_DESC = new org.apache.thrift.protocol.TField("NRC", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NOMBRE_CLASE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombreClase", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ID_PERIODO_FIELD_DESC = new org.apache.thrift.protocol.TField("idPeriodo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NUMERO_PERSONAL_MAESTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("numeroPersonalMaestro", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarClase_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarClase_argsTupleSchemeFactory();

    public java.lang.String NRC; // required
    public java.lang.String nombreClase; // required
    public int idPeriodo; // required
    public java.lang.String numeroPersonalMaestro; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NRC((short)1, "NRC"),
      NOMBRE_CLASE((short)2, "nombreClase"),
      ID_PERIODO((short)3, "idPeriodo"),
      NUMERO_PERSONAL_MAESTRO((short)4, "numeroPersonalMaestro");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NRC
            return NRC;
          case 2: // NOMBRE_CLASE
            return NOMBRE_CLASE;
          case 3: // ID_PERIODO
            return ID_PERIODO;
          case 4: // NUMERO_PERSONAL_MAESTRO
            return NUMERO_PERSONAL_MAESTRO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDPERIODO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NRC, new org.apache.thrift.meta_data.FieldMetaData("NRC", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOMBRE_CLASE, new org.apache.thrift.meta_data.FieldMetaData("nombreClase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_PERIODO, new org.apache.thrift.meta_data.FieldMetaData("idPeriodo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMERO_PERSONAL_MAESTRO, new org.apache.thrift.meta_data.FieldMetaData("numeroPersonalMaestro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarClase_args.class, metaDataMap);
    }

    public registrarClase_args() {
    }

    public registrarClase_args(
      java.lang.String NRC,
      java.lang.String nombreClase,
      int idPeriodo,
      java.lang.String numeroPersonalMaestro)
    {
      this();
      this.NRC = NRC;
      this.nombreClase = nombreClase;
      this.idPeriodo = idPeriodo;
      setIdPeriodoIsSet(true);
      this.numeroPersonalMaestro = numeroPersonalMaestro;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarClase_args(registrarClase_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNRC()) {
        this.NRC = other.NRC;
      }
      if (other.isSetNombreClase()) {
        this.nombreClase = other.nombreClase;
      }
      this.idPeriodo = other.idPeriodo;
      if (other.isSetNumeroPersonalMaestro()) {
        this.numeroPersonalMaestro = other.numeroPersonalMaestro;
      }
    }

    public registrarClase_args deepCopy() {
      return new registrarClase_args(this);
    }

    @Override
    public void clear() {
      this.NRC = null;
      this.nombreClase = null;
      setIdPeriodoIsSet(false);
      this.idPeriodo = 0;
      this.numeroPersonalMaestro = null;
    }

    public java.lang.String getNRC() {
      return this.NRC;
    }

    public registrarClase_args setNRC(java.lang.String NRC) {
      this.NRC = NRC;
      return this;
    }

    public void unsetNRC() {
      this.NRC = null;
    }

    /** Returns true if field NRC is set (has been assigned a value) and false otherwise */
    public boolean isSetNRC() {
      return this.NRC != null;
    }

    public void setNRCIsSet(boolean value) {
      if (!value) {
        this.NRC = null;
      }
    }

    public java.lang.String getNombreClase() {
      return this.nombreClase;
    }

    public registrarClase_args setNombreClase(java.lang.String nombreClase) {
      this.nombreClase = nombreClase;
      return this;
    }

    public void unsetNombreClase() {
      this.nombreClase = null;
    }

    /** Returns true if field nombreClase is set (has been assigned a value) and false otherwise */
    public boolean isSetNombreClase() {
      return this.nombreClase != null;
    }

    public void setNombreClaseIsSet(boolean value) {
      if (!value) {
        this.nombreClase = null;
      }
    }

    public int getIdPeriodo() {
      return this.idPeriodo;
    }

    public registrarClase_args setIdPeriodo(int idPeriodo) {
      this.idPeriodo = idPeriodo;
      setIdPeriodoIsSet(true);
      return this;
    }

    public void unsetIdPeriodo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDPERIODO_ISSET_ID);
    }

    /** Returns true if field idPeriodo is set (has been assigned a value) and false otherwise */
    public boolean isSetIdPeriodo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDPERIODO_ISSET_ID);
    }

    public void setIdPeriodoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDPERIODO_ISSET_ID, value);
    }

    public java.lang.String getNumeroPersonalMaestro() {
      return this.numeroPersonalMaestro;
    }

    public registrarClase_args setNumeroPersonalMaestro(java.lang.String numeroPersonalMaestro) {
      this.numeroPersonalMaestro = numeroPersonalMaestro;
      return this;
    }

    public void unsetNumeroPersonalMaestro() {
      this.numeroPersonalMaestro = null;
    }

    /** Returns true if field numeroPersonalMaestro is set (has been assigned a value) and false otherwise */
    public boolean isSetNumeroPersonalMaestro() {
      return this.numeroPersonalMaestro != null;
    }

    public void setNumeroPersonalMaestroIsSet(boolean value) {
      if (!value) {
        this.numeroPersonalMaestro = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NRC:
        if (value == null) {
          unsetNRC();
        } else {
          setNRC((java.lang.String)value);
        }
        break;

      case NOMBRE_CLASE:
        if (value == null) {
          unsetNombreClase();
        } else {
          setNombreClase((java.lang.String)value);
        }
        break;

      case ID_PERIODO:
        if (value == null) {
          unsetIdPeriodo();
        } else {
          setIdPeriodo((java.lang.Integer)value);
        }
        break;

      case NUMERO_PERSONAL_MAESTRO:
        if (value == null) {
          unsetNumeroPersonalMaestro();
        } else {
          setNumeroPersonalMaestro((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NRC:
        return getNRC();

      case NOMBRE_CLASE:
        return getNombreClase();

      case ID_PERIODO:
        return getIdPeriodo();

      case NUMERO_PERSONAL_MAESTRO:
        return getNumeroPersonalMaestro();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NRC:
        return isSetNRC();
      case NOMBRE_CLASE:
        return isSetNombreClase();
      case ID_PERIODO:
        return isSetIdPeriodo();
      case NUMERO_PERSONAL_MAESTRO:
        return isSetNumeroPersonalMaestro();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarClase_args)
        return this.equals((registrarClase_args)that);
      return false;
    }

    public boolean equals(registrarClase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_NRC = true && this.isSetNRC();
      boolean that_present_NRC = true && that.isSetNRC();
      if (this_present_NRC || that_present_NRC) {
        if (!(this_present_NRC && that_present_NRC))
          return false;
        if (!this.NRC.equals(that.NRC))
          return false;
      }

      boolean this_present_nombreClase = true && this.isSetNombreClase();
      boolean that_present_nombreClase = true && that.isSetNombreClase();
      if (this_present_nombreClase || that_present_nombreClase) {
        if (!(this_present_nombreClase && that_present_nombreClase))
          return false;
        if (!this.nombreClase.equals(that.nombreClase))
          return false;
      }

      boolean this_present_idPeriodo = true;
      boolean that_present_idPeriodo = true;
      if (this_present_idPeriodo || that_present_idPeriodo) {
        if (!(this_present_idPeriodo && that_present_idPeriodo))
          return false;
        if (this.idPeriodo != that.idPeriodo)
          return false;
      }

      boolean this_present_numeroPersonalMaestro = true && this.isSetNumeroPersonalMaestro();
      boolean that_present_numeroPersonalMaestro = true && that.isSetNumeroPersonalMaestro();
      if (this_present_numeroPersonalMaestro || that_present_numeroPersonalMaestro) {
        if (!(this_present_numeroPersonalMaestro && that_present_numeroPersonalMaestro))
          return false;
        if (!this.numeroPersonalMaestro.equals(that.numeroPersonalMaestro))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNRC()) ? 131071 : 524287);
      if (isSetNRC())
        hashCode = hashCode * 8191 + NRC.hashCode();

      hashCode = hashCode * 8191 + ((isSetNombreClase()) ? 131071 : 524287);
      if (isSetNombreClase())
        hashCode = hashCode * 8191 + nombreClase.hashCode();

      hashCode = hashCode * 8191 + idPeriodo;

      hashCode = hashCode * 8191 + ((isSetNumeroPersonalMaestro()) ? 131071 : 524287);
      if (isSetNumeroPersonalMaestro())
        hashCode = hashCode * 8191 + numeroPersonalMaestro.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarClase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNRC()).compareTo(other.isSetNRC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NRC, other.NRC);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNombreClase()).compareTo(other.isSetNombreClase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombreClase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombreClase, other.nombreClase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdPeriodo()).compareTo(other.isSetIdPeriodo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdPeriodo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPeriodo, other.idPeriodo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumeroPersonalMaestro()).compareTo(other.isSetNumeroPersonalMaestro());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumeroPersonalMaestro()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numeroPersonalMaestro, other.numeroPersonalMaestro);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarClase_args(");
      boolean first = true;

      sb.append("NRC:");
      if (this.NRC == null) {
        sb.append("null");
      } else {
        sb.append(this.NRC);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nombreClase:");
      if (this.nombreClase == null) {
        sb.append("null");
      } else {
        sb.append(this.nombreClase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idPeriodo:");
      sb.append(this.idPeriodo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numeroPersonalMaestro:");
      if (this.numeroPersonalMaestro == null) {
        sb.append("null");
      } else {
        sb.append(this.numeroPersonalMaestro);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarClase_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarClase_argsStandardScheme getScheme() {
        return new registrarClase_argsStandardScheme();
      }
    }

    private static class registrarClase_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarClase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.NRC = iprot.readString();
                struct.setNRCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOMBRE_CLASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombreClase = iprot.readString();
                struct.setNombreClaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID_PERIODO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idPeriodo = iprot.readI32();
                struct.setIdPeriodoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUMERO_PERSONAL_MAESTRO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numeroPersonalMaestro = iprot.readString();
                struct.setNumeroPersonalMaestroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarClase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.NRC != null) {
          oprot.writeFieldBegin(NRC_FIELD_DESC);
          oprot.writeString(struct.NRC);
          oprot.writeFieldEnd();
        }
        if (struct.nombreClase != null) {
          oprot.writeFieldBegin(NOMBRE_CLASE_FIELD_DESC);
          oprot.writeString(struct.nombreClase);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_PERIODO_FIELD_DESC);
        oprot.writeI32(struct.idPeriodo);
        oprot.writeFieldEnd();
        if (struct.numeroPersonalMaestro != null) {
          oprot.writeFieldBegin(NUMERO_PERSONAL_MAESTRO_FIELD_DESC);
          oprot.writeString(struct.numeroPersonalMaestro);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarClase_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarClase_argsTupleScheme getScheme() {
        return new registrarClase_argsTupleScheme();
      }
    }

    private static class registrarClase_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarClase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNRC()) {
          optionals.set(0);
        }
        if (struct.isSetNombreClase()) {
          optionals.set(1);
        }
        if (struct.isSetIdPeriodo()) {
          optionals.set(2);
        }
        if (struct.isSetNumeroPersonalMaestro()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNRC()) {
          oprot.writeString(struct.NRC);
        }
        if (struct.isSetNombreClase()) {
          oprot.writeString(struct.nombreClase);
        }
        if (struct.isSetIdPeriodo()) {
          oprot.writeI32(struct.idPeriodo);
        }
        if (struct.isSetNumeroPersonalMaestro()) {
          oprot.writeString(struct.numeroPersonalMaestro);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.NRC = iprot.readString();
          struct.setNRCIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nombreClase = iprot.readString();
          struct.setNombreClaseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.idPeriodo = iprot.readI32();
          struct.setIdPeriodoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numeroPersonalMaestro = iprot.readString();
          struct.setNumeroPersonalMaestroIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarClase_result implements org.apache.thrift.TBase<registrarClase_result, registrarClase_result._Fields>, java.io.Serializable, Cloneable, Comparable<registrarClase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarClase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarClase_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarClase_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarClase_result.class, metaDataMap);
    }

    public registrarClase_result() {
    }

    public registrarClase_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarClase_result(registrarClase_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public registrarClase_result deepCopy() {
      return new registrarClase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public registrarClase_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarClase_result)
        return this.equals((registrarClase_result)that);
      return false;
    }

    public boolean equals(registrarClase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarClase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarClase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarClase_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarClase_resultStandardScheme getScheme() {
        return new registrarClase_resultStandardScheme();
      }
    }

    private static class registrarClase_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarClase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarClase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarClase_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarClase_resultTupleScheme getScheme() {
        return new registrarClase_resultTupleScheme();
      }
    }

    private static class registrarClase_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarClase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class inscribirClase_args implements org.apache.thrift.TBase<inscribirClase_args, inscribirClase_args._Fields>, java.io.Serializable, Cloneable, Comparable<inscribirClase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inscribirClase_args");

    private static final org.apache.thrift.protocol.TField MATRICULA_FIELD_DESC = new org.apache.thrift.protocol.TField("matricula", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NRC_FIELD_DESC = new org.apache.thrift.protocol.TField("NRC", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROL_FIELD_DESC = new org.apache.thrift.protocol.TField("rol", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inscribirClase_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inscribirClase_argsTupleSchemeFactory();

    public java.lang.String matricula; // required
    public java.lang.String NRC; // required
    public java.lang.String rol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATRICULA((short)1, "matricula"),
      NRC((short)2, "NRC"),
      ROL((short)3, "rol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATRICULA
            return MATRICULA;
          case 2: // NRC
            return NRC;
          case 3: // ROL
            return ROL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATRICULA, new org.apache.thrift.meta_data.FieldMetaData("matricula", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NRC, new org.apache.thrift.meta_data.FieldMetaData("NRC", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROL, new org.apache.thrift.meta_data.FieldMetaData("rol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inscribirClase_args.class, metaDataMap);
    }

    public inscribirClase_args() {
    }

    public inscribirClase_args(
      java.lang.String matricula,
      java.lang.String NRC,
      java.lang.String rol)
    {
      this();
      this.matricula = matricula;
      this.NRC = NRC;
      this.rol = rol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inscribirClase_args(inscribirClase_args other) {
      if (other.isSetMatricula()) {
        this.matricula = other.matricula;
      }
      if (other.isSetNRC()) {
        this.NRC = other.NRC;
      }
      if (other.isSetRol()) {
        this.rol = other.rol;
      }
    }

    public inscribirClase_args deepCopy() {
      return new inscribirClase_args(this);
    }

    @Override
    public void clear() {
      this.matricula = null;
      this.NRC = null;
      this.rol = null;
    }

    public java.lang.String getMatricula() {
      return this.matricula;
    }

    public inscribirClase_args setMatricula(java.lang.String matricula) {
      this.matricula = matricula;
      return this;
    }

    public void unsetMatricula() {
      this.matricula = null;
    }

    /** Returns true if field matricula is set (has been assigned a value) and false otherwise */
    public boolean isSetMatricula() {
      return this.matricula != null;
    }

    public void setMatriculaIsSet(boolean value) {
      if (!value) {
        this.matricula = null;
      }
    }

    public java.lang.String getNRC() {
      return this.NRC;
    }

    public inscribirClase_args setNRC(java.lang.String NRC) {
      this.NRC = NRC;
      return this;
    }

    public void unsetNRC() {
      this.NRC = null;
    }

    /** Returns true if field NRC is set (has been assigned a value) and false otherwise */
    public boolean isSetNRC() {
      return this.NRC != null;
    }

    public void setNRCIsSet(boolean value) {
      if (!value) {
        this.NRC = null;
      }
    }

    public java.lang.String getRol() {
      return this.rol;
    }

    public inscribirClase_args setRol(java.lang.String rol) {
      this.rol = rol;
      return this;
    }

    public void unsetRol() {
      this.rol = null;
    }

    /** Returns true if field rol is set (has been assigned a value) and false otherwise */
    public boolean isSetRol() {
      return this.rol != null;
    }

    public void setRolIsSet(boolean value) {
      if (!value) {
        this.rol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MATRICULA:
        if (value == null) {
          unsetMatricula();
        } else {
          setMatricula((java.lang.String)value);
        }
        break;

      case NRC:
        if (value == null) {
          unsetNRC();
        } else {
          setNRC((java.lang.String)value);
        }
        break;

      case ROL:
        if (value == null) {
          unsetRol();
        } else {
          setRol((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MATRICULA:
        return getMatricula();

      case NRC:
        return getNRC();

      case ROL:
        return getRol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MATRICULA:
        return isSetMatricula();
      case NRC:
        return isSetNRC();
      case ROL:
        return isSetRol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof inscribirClase_args)
        return this.equals((inscribirClase_args)that);
      return false;
    }

    public boolean equals(inscribirClase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_matricula = true && this.isSetMatricula();
      boolean that_present_matricula = true && that.isSetMatricula();
      if (this_present_matricula || that_present_matricula) {
        if (!(this_present_matricula && that_present_matricula))
          return false;
        if (!this.matricula.equals(that.matricula))
          return false;
      }

      boolean this_present_NRC = true && this.isSetNRC();
      boolean that_present_NRC = true && that.isSetNRC();
      if (this_present_NRC || that_present_NRC) {
        if (!(this_present_NRC && that_present_NRC))
          return false;
        if (!this.NRC.equals(that.NRC))
          return false;
      }

      boolean this_present_rol = true && this.isSetRol();
      boolean that_present_rol = true && that.isSetRol();
      if (this_present_rol || that_present_rol) {
        if (!(this_present_rol && that_present_rol))
          return false;
        if (!this.rol.equals(that.rol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMatricula()) ? 131071 : 524287);
      if (isSetMatricula())
        hashCode = hashCode * 8191 + matricula.hashCode();

      hashCode = hashCode * 8191 + ((isSetNRC()) ? 131071 : 524287);
      if (isSetNRC())
        hashCode = hashCode * 8191 + NRC.hashCode();

      hashCode = hashCode * 8191 + ((isSetRol()) ? 131071 : 524287);
      if (isSetRol())
        hashCode = hashCode * 8191 + rol.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(inscribirClase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMatricula()).compareTo(other.isSetMatricula());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatricula()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matricula, other.matricula);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNRC()).compareTo(other.isSetNRC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NRC, other.NRC);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRol()).compareTo(other.isSetRol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rol, other.rol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("inscribirClase_args(");
      boolean first = true;

      sb.append("matricula:");
      if (this.matricula == null) {
        sb.append("null");
      } else {
        sb.append(this.matricula);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("NRC:");
      if (this.NRC == null) {
        sb.append("null");
      } else {
        sb.append(this.NRC);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rol:");
      if (this.rol == null) {
        sb.append("null");
      } else {
        sb.append(this.rol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inscribirClase_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inscribirClase_argsStandardScheme getScheme() {
        return new inscribirClase_argsStandardScheme();
      }
    }

    private static class inscribirClase_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<inscribirClase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inscribirClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATRICULA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.matricula = iprot.readString();
                struct.setMatriculaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.NRC = iprot.readString();
                struct.setNRCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rol = iprot.readString();
                struct.setRolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inscribirClase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matricula != null) {
          oprot.writeFieldBegin(MATRICULA_FIELD_DESC);
          oprot.writeString(struct.matricula);
          oprot.writeFieldEnd();
        }
        if (struct.NRC != null) {
          oprot.writeFieldBegin(NRC_FIELD_DESC);
          oprot.writeString(struct.NRC);
          oprot.writeFieldEnd();
        }
        if (struct.rol != null) {
          oprot.writeFieldBegin(ROL_FIELD_DESC);
          oprot.writeString(struct.rol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inscribirClase_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inscribirClase_argsTupleScheme getScheme() {
        return new inscribirClase_argsTupleScheme();
      }
    }

    private static class inscribirClase_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<inscribirClase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inscribirClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMatricula()) {
          optionals.set(0);
        }
        if (struct.isSetNRC()) {
          optionals.set(1);
        }
        if (struct.isSetRol()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMatricula()) {
          oprot.writeString(struct.matricula);
        }
        if (struct.isSetNRC()) {
          oprot.writeString(struct.NRC);
        }
        if (struct.isSetRol()) {
          oprot.writeString(struct.rol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inscribirClase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.matricula = iprot.readString();
          struct.setMatriculaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.NRC = iprot.readString();
          struct.setNRCIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rol = iprot.readString();
          struct.setRolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class inscribirClase_result implements org.apache.thrift.TBase<inscribirClase_result, inscribirClase_result._Fields>, java.io.Serializable, Cloneable, Comparable<inscribirClase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inscribirClase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inscribirClase_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inscribirClase_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inscribirClase_result.class, metaDataMap);
    }

    public inscribirClase_result() {
    }

    public inscribirClase_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inscribirClase_result(inscribirClase_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public inscribirClase_result deepCopy() {
      return new inscribirClase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public inscribirClase_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof inscribirClase_result)
        return this.equals((inscribirClase_result)that);
      return false;
    }

    public boolean equals(inscribirClase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(inscribirClase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("inscribirClase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inscribirClase_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inscribirClase_resultStandardScheme getScheme() {
        return new inscribirClase_resultStandardScheme();
      }
    }

    private static class inscribirClase_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<inscribirClase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inscribirClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inscribirClase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inscribirClase_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inscribirClase_resultTupleScheme getScheme() {
        return new inscribirClase_resultTupleScheme();
      }
    }

    private static class inscribirClase_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<inscribirClase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inscribirClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inscribirClase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enviarMensaje_args implements org.apache.thrift.TBase<enviarMensaje_args, enviarMensaje_args._Fields>, java.io.Serializable, Cloneable, Comparable<enviarMensaje_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enviarMensaje_args");

    private static final org.apache.thrift.protocol.TField MENSAJE_FIELD_DESC = new org.apache.thrift.protocol.TField("mensaje", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASE_FIELD_DESC = new org.apache.thrift.protocol.TField("clase", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enviarMensaje_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enviarMensaje_argsTupleSchemeFactory();

    public java.lang.String mensaje; // required
    public java.lang.String clase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MENSAJE((short)1, "mensaje"),
      CLASE((short)2, "clase");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MENSAJE
            return MENSAJE;
          case 2: // CLASE
            return CLASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MENSAJE, new org.apache.thrift.meta_data.FieldMetaData("mensaje", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASE, new org.apache.thrift.meta_data.FieldMetaData("clase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enviarMensaje_args.class, metaDataMap);
    }

    public enviarMensaje_args() {
    }

    public enviarMensaje_args(
      java.lang.String mensaje,
      java.lang.String clase)
    {
      this();
      this.mensaje = mensaje;
      this.clase = clase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enviarMensaje_args(enviarMensaje_args other) {
      if (other.isSetMensaje()) {
        this.mensaje = other.mensaje;
      }
      if (other.isSetClase()) {
        this.clase = other.clase;
      }
    }

    public enviarMensaje_args deepCopy() {
      return new enviarMensaje_args(this);
    }

    @Override
    public void clear() {
      this.mensaje = null;
      this.clase = null;
    }

    public java.lang.String getMensaje() {
      return this.mensaje;
    }

    public enviarMensaje_args setMensaje(java.lang.String mensaje) {
      this.mensaje = mensaje;
      return this;
    }

    public void unsetMensaje() {
      this.mensaje = null;
    }

    /** Returns true if field mensaje is set (has been assigned a value) and false otherwise */
    public boolean isSetMensaje() {
      return this.mensaje != null;
    }

    public void setMensajeIsSet(boolean value) {
      if (!value) {
        this.mensaje = null;
      }
    }

    public java.lang.String getClase() {
      return this.clase;
    }

    public enviarMensaje_args setClase(java.lang.String clase) {
      this.clase = clase;
      return this;
    }

    public void unsetClase() {
      this.clase = null;
    }

    /** Returns true if field clase is set (has been assigned a value) and false otherwise */
    public boolean isSetClase() {
      return this.clase != null;
    }

    public void setClaseIsSet(boolean value) {
      if (!value) {
        this.clase = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MENSAJE:
        if (value == null) {
          unsetMensaje();
        } else {
          setMensaje((java.lang.String)value);
        }
        break;

      case CLASE:
        if (value == null) {
          unsetClase();
        } else {
          setClase((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MENSAJE:
        return getMensaje();

      case CLASE:
        return getClase();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MENSAJE:
        return isSetMensaje();
      case CLASE:
        return isSetClase();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enviarMensaje_args)
        return this.equals((enviarMensaje_args)that);
      return false;
    }

    public boolean equals(enviarMensaje_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mensaje = true && this.isSetMensaje();
      boolean that_present_mensaje = true && that.isSetMensaje();
      if (this_present_mensaje || that_present_mensaje) {
        if (!(this_present_mensaje && that_present_mensaje))
          return false;
        if (!this.mensaje.equals(that.mensaje))
          return false;
      }

      boolean this_present_clase = true && this.isSetClase();
      boolean that_present_clase = true && that.isSetClase();
      if (this_present_clase || that_present_clase) {
        if (!(this_present_clase && that_present_clase))
          return false;
        if (!this.clase.equals(that.clase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMensaje()) ? 131071 : 524287);
      if (isSetMensaje())
        hashCode = hashCode * 8191 + mensaje.hashCode();

      hashCode = hashCode * 8191 + ((isSetClase()) ? 131071 : 524287);
      if (isSetClase())
        hashCode = hashCode * 8191 + clase.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enviarMensaje_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMensaje()).compareTo(other.isSetMensaje());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMensaje()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mensaje, other.mensaje);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClase()).compareTo(other.isSetClase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clase, other.clase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enviarMensaje_args(");
      boolean first = true;

      sb.append("mensaje:");
      if (this.mensaje == null) {
        sb.append("null");
      } else {
        sb.append(this.mensaje);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clase:");
      if (this.clase == null) {
        sb.append("null");
      } else {
        sb.append(this.clase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enviarMensaje_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enviarMensaje_argsStandardScheme getScheme() {
        return new enviarMensaje_argsStandardScheme();
      }
    }

    private static class enviarMensaje_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<enviarMensaje_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enviarMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MENSAJE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mensaje = iprot.readString();
                struct.setMensajeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clase = iprot.readString();
                struct.setClaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enviarMensaje_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mensaje != null) {
          oprot.writeFieldBegin(MENSAJE_FIELD_DESC);
          oprot.writeString(struct.mensaje);
          oprot.writeFieldEnd();
        }
        if (struct.clase != null) {
          oprot.writeFieldBegin(CLASE_FIELD_DESC);
          oprot.writeString(struct.clase);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enviarMensaje_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enviarMensaje_argsTupleScheme getScheme() {
        return new enviarMensaje_argsTupleScheme();
      }
    }

    private static class enviarMensaje_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<enviarMensaje_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enviarMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMensaje()) {
          optionals.set(0);
        }
        if (struct.isSetClase()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMensaje()) {
          oprot.writeString(struct.mensaje);
        }
        if (struct.isSetClase()) {
          oprot.writeString(struct.clase);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enviarMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mensaje = iprot.readString();
          struct.setMensajeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clase = iprot.readString();
          struct.setClaseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enviarMensaje_result implements org.apache.thrift.TBase<enviarMensaje_result, enviarMensaje_result._Fields>, java.io.Serializable, Cloneable, Comparable<enviarMensaje_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enviarMensaje_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enviarMensaje_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enviarMensaje_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enviarMensaje_result.class, metaDataMap);
    }

    public enviarMensaje_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enviarMensaje_result(enviarMensaje_result other) {
    }

    public enviarMensaje_result deepCopy() {
      return new enviarMensaje_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enviarMensaje_result)
        return this.equals((enviarMensaje_result)that);
      return false;
    }

    public boolean equals(enviarMensaje_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(enviarMensaje_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enviarMensaje_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enviarMensaje_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enviarMensaje_resultStandardScheme getScheme() {
        return new enviarMensaje_resultStandardScheme();
      }
    }

    private static class enviarMensaje_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<enviarMensaje_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enviarMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enviarMensaje_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enviarMensaje_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enviarMensaje_resultTupleScheme getScheme() {
        return new enviarMensaje_resultTupleScheme();
      }
    }

    private static class enviarMensaje_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<enviarMensaje_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enviarMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enviarMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recibirMensaje_args implements org.apache.thrift.TBase<recibirMensaje_args, recibirMensaje_args._Fields>, java.io.Serializable, Cloneable, Comparable<recibirMensaje_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recibirMensaje_args");

    private static final org.apache.thrift.protocol.TField MENSAJE_FIELD_DESC = new org.apache.thrift.protocol.TField("mensaje", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recibirMensaje_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recibirMensaje_argsTupleSchemeFactory();

    public java.lang.String mensaje; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MENSAJE((short)1, "mensaje");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MENSAJE
            return MENSAJE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MENSAJE, new org.apache.thrift.meta_data.FieldMetaData("mensaje", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recibirMensaje_args.class, metaDataMap);
    }

    public recibirMensaje_args() {
    }

    public recibirMensaje_args(
      java.lang.String mensaje)
    {
      this();
      this.mensaje = mensaje;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recibirMensaje_args(recibirMensaje_args other) {
      if (other.isSetMensaje()) {
        this.mensaje = other.mensaje;
      }
    }

    public recibirMensaje_args deepCopy() {
      return new recibirMensaje_args(this);
    }

    @Override
    public void clear() {
      this.mensaje = null;
    }

    public java.lang.String getMensaje() {
      return this.mensaje;
    }

    public recibirMensaje_args setMensaje(java.lang.String mensaje) {
      this.mensaje = mensaje;
      return this;
    }

    public void unsetMensaje() {
      this.mensaje = null;
    }

    /** Returns true if field mensaje is set (has been assigned a value) and false otherwise */
    public boolean isSetMensaje() {
      return this.mensaje != null;
    }

    public void setMensajeIsSet(boolean value) {
      if (!value) {
        this.mensaje = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MENSAJE:
        if (value == null) {
          unsetMensaje();
        } else {
          setMensaje((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MENSAJE:
        return getMensaje();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MENSAJE:
        return isSetMensaje();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recibirMensaje_args)
        return this.equals((recibirMensaje_args)that);
      return false;
    }

    public boolean equals(recibirMensaje_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mensaje = true && this.isSetMensaje();
      boolean that_present_mensaje = true && that.isSetMensaje();
      if (this_present_mensaje || that_present_mensaje) {
        if (!(this_present_mensaje && that_present_mensaje))
          return false;
        if (!this.mensaje.equals(that.mensaje))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMensaje()) ? 131071 : 524287);
      if (isSetMensaje())
        hashCode = hashCode * 8191 + mensaje.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recibirMensaje_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMensaje()).compareTo(other.isSetMensaje());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMensaje()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mensaje, other.mensaje);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recibirMensaje_args(");
      boolean first = true;

      sb.append("mensaje:");
      if (this.mensaje == null) {
        sb.append("null");
      } else {
        sb.append(this.mensaje);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recibirMensaje_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recibirMensaje_argsStandardScheme getScheme() {
        return new recibirMensaje_argsStandardScheme();
      }
    }

    private static class recibirMensaje_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recibirMensaje_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recibirMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MENSAJE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mensaje = iprot.readString();
                struct.setMensajeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recibirMensaje_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mensaje != null) {
          oprot.writeFieldBegin(MENSAJE_FIELD_DESC);
          oprot.writeString(struct.mensaje);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recibirMensaje_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recibirMensaje_argsTupleScheme getScheme() {
        return new recibirMensaje_argsTupleScheme();
      }
    }

    private static class recibirMensaje_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recibirMensaje_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recibirMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMensaje()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMensaje()) {
          oprot.writeString(struct.mensaje);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recibirMensaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mensaje = iprot.readString();
          struct.setMensajeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recibirMensaje_result implements org.apache.thrift.TBase<recibirMensaje_result, recibirMensaje_result._Fields>, java.io.Serializable, Cloneable, Comparable<recibirMensaje_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recibirMensaje_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recibirMensaje_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recibirMensaje_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recibirMensaje_result.class, metaDataMap);
    }

    public recibirMensaje_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recibirMensaje_result(recibirMensaje_result other) {
    }

    public recibirMensaje_result deepCopy() {
      return new recibirMensaje_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recibirMensaje_result)
        return this.equals((recibirMensaje_result)that);
      return false;
    }

    public boolean equals(recibirMensaje_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(recibirMensaje_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recibirMensaje_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recibirMensaje_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recibirMensaje_resultStandardScheme getScheme() {
        return new recibirMensaje_resultStandardScheme();
      }
    }

    private static class recibirMensaje_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recibirMensaje_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recibirMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recibirMensaje_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recibirMensaje_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recibirMensaje_resultTupleScheme getScheme() {
        return new recibirMensaje_resultTupleScheme();
      }
    }

    private static class recibirMensaje_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recibirMensaje_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recibirMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recibirMensaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pedirParticipacion_args implements org.apache.thrift.TBase<pedirParticipacion_args, pedirParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<pedirParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pedirParticipacion_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pedirParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pedirParticipacion_argsTupleSchemeFactory();

    public java.lang.String nombre; // required
    public java.lang.String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre"),
      IP((short)2, "ip");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          case 2: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pedirParticipacion_args.class, metaDataMap);
    }

    public pedirParticipacion_args() {
    }

    public pedirParticipacion_args(
      java.lang.String nombre,
      java.lang.String ip)
    {
      this();
      this.nombre = nombre;
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pedirParticipacion_args(pedirParticipacion_args other) {
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public pedirParticipacion_args deepCopy() {
      return new pedirParticipacion_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
      this.ip = null;
    }

    public java.lang.String getNombre() {
      return this.nombre;
    }

    public pedirParticipacion_args setNombre(java.lang.String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public java.lang.String getIp() {
      return this.ip;
    }

    public pedirParticipacion_args setIp(java.lang.String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((java.lang.String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      case IP:
        return getIp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      case IP:
        return isSetIp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pedirParticipacion_args)
        return this.equals((pedirParticipacion_args)that);
      return false;
    }

    public boolean equals(pedirParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
      if (isSetNombre())
        hashCode = hashCode * 8191 + nombre.hashCode();

      hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
      if (isSetIp())
        hashCode = hashCode * 8191 + ip.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pedirParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pedirParticipacion_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pedirParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirParticipacion_argsStandardScheme getScheme() {
        return new pedirParticipacion_argsStandardScheme();
      }
    }

    private static class pedirParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pedirParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pedirParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pedirParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pedirParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirParticipacion_argsTupleScheme getScheme() {
        return new pedirParticipacion_argsTupleScheme();
      }
    }

    private static class pedirParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pedirParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pedirParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pedirParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pedirParticipacion_result implements org.apache.thrift.TBase<pedirParticipacion_result, pedirParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<pedirParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pedirParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pedirParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pedirParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pedirParticipacion_result.class, metaDataMap);
    }

    public pedirParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pedirParticipacion_result(pedirParticipacion_result other) {
    }

    public pedirParticipacion_result deepCopy() {
      return new pedirParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pedirParticipacion_result)
        return this.equals((pedirParticipacion_result)that);
      return false;
    }

    public boolean equals(pedirParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(pedirParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pedirParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pedirParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirParticipacion_resultStandardScheme getScheme() {
        return new pedirParticipacion_resultStandardScheme();
      }
    }

    private static class pedirParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pedirParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pedirParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pedirParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pedirParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirParticipacion_resultTupleScheme getScheme() {
        return new pedirParticipacion_resultTupleScheme();
      }
    }

    private static class pedirParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pedirParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pedirParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pedirParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mostrarSolicitudParticipacion_args implements org.apache.thrift.TBase<mostrarSolicitudParticipacion_args, mostrarSolicitudParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<mostrarSolicitudParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mostrarSolicitudParticipacion_args");

    private static final org.apache.thrift.protocol.TField DATOS_ALUMNO_FIELD_DESC = new org.apache.thrift.protocol.TField("datosAlumno", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mostrarSolicitudParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mostrarSolicitudParticipacion_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> datosAlumno; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATOS_ALUMNO((short)1, "datosAlumno");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATOS_ALUMNO
            return DATOS_ALUMNO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATOS_ALUMNO, new org.apache.thrift.meta_data.FieldMetaData("datosAlumno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mostrarSolicitudParticipacion_args.class, metaDataMap);
    }

    public mostrarSolicitudParticipacion_args() {
    }

    public mostrarSolicitudParticipacion_args(
      java.util.List<java.lang.String> datosAlumno)
    {
      this();
      this.datosAlumno = datosAlumno;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mostrarSolicitudParticipacion_args(mostrarSolicitudParticipacion_args other) {
      if (other.isSetDatosAlumno()) {
        java.util.List<java.lang.String> __this__datosAlumno = new java.util.ArrayList<java.lang.String>(other.datosAlumno);
        this.datosAlumno = __this__datosAlumno;
      }
    }

    public mostrarSolicitudParticipacion_args deepCopy() {
      return new mostrarSolicitudParticipacion_args(this);
    }

    @Override
    public void clear() {
      this.datosAlumno = null;
    }

    public int getDatosAlumnoSize() {
      return (this.datosAlumno == null) ? 0 : this.datosAlumno.size();
    }

    public java.util.Iterator<java.lang.String> getDatosAlumnoIterator() {
      return (this.datosAlumno == null) ? null : this.datosAlumno.iterator();
    }

    public void addToDatosAlumno(java.lang.String elem) {
      if (this.datosAlumno == null) {
        this.datosAlumno = new java.util.ArrayList<java.lang.String>();
      }
      this.datosAlumno.add(elem);
    }

    public java.util.List<java.lang.String> getDatosAlumno() {
      return this.datosAlumno;
    }

    public mostrarSolicitudParticipacion_args setDatosAlumno(java.util.List<java.lang.String> datosAlumno) {
      this.datosAlumno = datosAlumno;
      return this;
    }

    public void unsetDatosAlumno() {
      this.datosAlumno = null;
    }

    /** Returns true if field datosAlumno is set (has been assigned a value) and false otherwise */
    public boolean isSetDatosAlumno() {
      return this.datosAlumno != null;
    }

    public void setDatosAlumnoIsSet(boolean value) {
      if (!value) {
        this.datosAlumno = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DATOS_ALUMNO:
        if (value == null) {
          unsetDatosAlumno();
        } else {
          setDatosAlumno((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATOS_ALUMNO:
        return getDatosAlumno();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATOS_ALUMNO:
        return isSetDatosAlumno();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mostrarSolicitudParticipacion_args)
        return this.equals((mostrarSolicitudParticipacion_args)that);
      return false;
    }

    public boolean equals(mostrarSolicitudParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_datosAlumno = true && this.isSetDatosAlumno();
      boolean that_present_datosAlumno = true && that.isSetDatosAlumno();
      if (this_present_datosAlumno || that_present_datosAlumno) {
        if (!(this_present_datosAlumno && that_present_datosAlumno))
          return false;
        if (!this.datosAlumno.equals(that.datosAlumno))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDatosAlumno()) ? 131071 : 524287);
      if (isSetDatosAlumno())
        hashCode = hashCode * 8191 + datosAlumno.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mostrarSolicitudParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDatosAlumno()).compareTo(other.isSetDatosAlumno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatosAlumno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datosAlumno, other.datosAlumno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mostrarSolicitudParticipacion_args(");
      boolean first = true;

      sb.append("datosAlumno:");
      if (this.datosAlumno == null) {
        sb.append("null");
      } else {
        sb.append(this.datosAlumno);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mostrarSolicitudParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarSolicitudParticipacion_argsStandardScheme getScheme() {
        return new mostrarSolicitudParticipacion_argsStandardScheme();
      }
    }

    private static class mostrarSolicitudParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mostrarSolicitudParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mostrarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATOS_ALUMNO
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.datosAlumno = new java.util.ArrayList<java.lang.String>(_list32.size);
                  java.lang.String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.datosAlumno.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setDatosAlumnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mostrarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datosAlumno != null) {
          oprot.writeFieldBegin(DATOS_ALUMNO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.datosAlumno.size()));
            for (java.lang.String _iter35 : struct.datosAlumno)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mostrarSolicitudParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarSolicitudParticipacion_argsTupleScheme getScheme() {
        return new mostrarSolicitudParticipacion_argsTupleScheme();
      }
    }

    private static class mostrarSolicitudParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mostrarSolicitudParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mostrarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDatosAlumno()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatosAlumno()) {
          {
            oprot.writeI32(struct.datosAlumno.size());
            for (java.lang.String _iter36 : struct.datosAlumno)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mostrarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datosAlumno = new java.util.ArrayList<java.lang.String>(_list37.size);
            java.lang.String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.datosAlumno.add(_elem38);
            }
          }
          struct.setDatosAlumnoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mostrarSolicitudParticipacion_result implements org.apache.thrift.TBase<mostrarSolicitudParticipacion_result, mostrarSolicitudParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<mostrarSolicitudParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mostrarSolicitudParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mostrarSolicitudParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mostrarSolicitudParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mostrarSolicitudParticipacion_result.class, metaDataMap);
    }

    public mostrarSolicitudParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mostrarSolicitudParticipacion_result(mostrarSolicitudParticipacion_result other) {
    }

    public mostrarSolicitudParticipacion_result deepCopy() {
      return new mostrarSolicitudParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mostrarSolicitudParticipacion_result)
        return this.equals((mostrarSolicitudParticipacion_result)that);
      return false;
    }

    public boolean equals(mostrarSolicitudParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(mostrarSolicitudParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mostrarSolicitudParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mostrarSolicitudParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarSolicitudParticipacion_resultStandardScheme getScheme() {
        return new mostrarSolicitudParticipacion_resultStandardScheme();
      }
    }

    private static class mostrarSolicitudParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mostrarSolicitudParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mostrarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mostrarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mostrarSolicitudParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarSolicitudParticipacion_resultTupleScheme getScheme() {
        return new mostrarSolicitudParticipacion_resultTupleScheme();
      }
    }

    private static class mostrarSolicitudParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mostrarSolicitudParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mostrarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mostrarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class otorgarParticipacion_args implements org.apache.thrift.TBase<otorgarParticipacion_args, otorgarParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<otorgarParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("otorgarParticipacion_args");

    private static final org.apache.thrift.protocol.TField IP_ALUMNO_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAlumno", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new otorgarParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new otorgarParticipacion_argsTupleSchemeFactory();

    public java.lang.String ipAlumno; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ALUMNO((short)1, "ipAlumno");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ALUMNO
            return IP_ALUMNO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ALUMNO, new org.apache.thrift.meta_data.FieldMetaData("ipAlumno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(otorgarParticipacion_args.class, metaDataMap);
    }

    public otorgarParticipacion_args() {
    }

    public otorgarParticipacion_args(
      java.lang.String ipAlumno)
    {
      this();
      this.ipAlumno = ipAlumno;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public otorgarParticipacion_args(otorgarParticipacion_args other) {
      if (other.isSetIpAlumno()) {
        this.ipAlumno = other.ipAlumno;
      }
    }

    public otorgarParticipacion_args deepCopy() {
      return new otorgarParticipacion_args(this);
    }

    @Override
    public void clear() {
      this.ipAlumno = null;
    }

    public java.lang.String getIpAlumno() {
      return this.ipAlumno;
    }

    public otorgarParticipacion_args setIpAlumno(java.lang.String ipAlumno) {
      this.ipAlumno = ipAlumno;
      return this;
    }

    public void unsetIpAlumno() {
      this.ipAlumno = null;
    }

    /** Returns true if field ipAlumno is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAlumno() {
      return this.ipAlumno != null;
    }

    public void setIpAlumnoIsSet(boolean value) {
      if (!value) {
        this.ipAlumno = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IP_ALUMNO:
        if (value == null) {
          unsetIpAlumno();
        } else {
          setIpAlumno((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ALUMNO:
        return getIpAlumno();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IP_ALUMNO:
        return isSetIpAlumno();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof otorgarParticipacion_args)
        return this.equals((otorgarParticipacion_args)that);
      return false;
    }

    public boolean equals(otorgarParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ipAlumno = true && this.isSetIpAlumno();
      boolean that_present_ipAlumno = true && that.isSetIpAlumno();
      if (this_present_ipAlumno || that_present_ipAlumno) {
        if (!(this_present_ipAlumno && that_present_ipAlumno))
          return false;
        if (!this.ipAlumno.equals(that.ipAlumno))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIpAlumno()) ? 131071 : 524287);
      if (isSetIpAlumno())
        hashCode = hashCode * 8191 + ipAlumno.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(otorgarParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIpAlumno()).compareTo(other.isSetIpAlumno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAlumno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAlumno, other.ipAlumno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("otorgarParticipacion_args(");
      boolean first = true;

      sb.append("ipAlumno:");
      if (this.ipAlumno == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAlumno);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class otorgarParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public otorgarParticipacion_argsStandardScheme getScheme() {
        return new otorgarParticipacion_argsStandardScheme();
      }
    }

    private static class otorgarParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<otorgarParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, otorgarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ALUMNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAlumno = iprot.readString();
                struct.setIpAlumnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, otorgarParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAlumno != null) {
          oprot.writeFieldBegin(IP_ALUMNO_FIELD_DESC);
          oprot.writeString(struct.ipAlumno);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class otorgarParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public otorgarParticipacion_argsTupleScheme getScheme() {
        return new otorgarParticipacion_argsTupleScheme();
      }
    }

    private static class otorgarParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<otorgarParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, otorgarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIpAlumno()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpAlumno()) {
          oprot.writeString(struct.ipAlumno);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, otorgarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipAlumno = iprot.readString();
          struct.setIpAlumnoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class otorgarParticipacion_result implements org.apache.thrift.TBase<otorgarParticipacion_result, otorgarParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<otorgarParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("otorgarParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new otorgarParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new otorgarParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(otorgarParticipacion_result.class, metaDataMap);
    }

    public otorgarParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public otorgarParticipacion_result(otorgarParticipacion_result other) {
    }

    public otorgarParticipacion_result deepCopy() {
      return new otorgarParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof otorgarParticipacion_result)
        return this.equals((otorgarParticipacion_result)that);
      return false;
    }

    public boolean equals(otorgarParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(otorgarParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("otorgarParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class otorgarParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public otorgarParticipacion_resultStandardScheme getScheme() {
        return new otorgarParticipacion_resultStandardScheme();
      }
    }

    private static class otorgarParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<otorgarParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, otorgarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, otorgarParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class otorgarParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public otorgarParticipacion_resultTupleScheme getScheme() {
        return new otorgarParticipacion_resultTupleScheme();
      }
    }

    private static class otorgarParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<otorgarParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, otorgarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, otorgarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mostrarParticipacion_args implements org.apache.thrift.TBase<mostrarParticipacion_args, mostrarParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<mostrarParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mostrarParticipacion_args");

    private static final org.apache.thrift.protocol.TField IP_ALUMNO_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAlumno", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mostrarParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mostrarParticipacion_argsTupleSchemeFactory();

    public java.lang.String ipAlumno; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ALUMNO((short)1, "ipAlumno");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ALUMNO
            return IP_ALUMNO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ALUMNO, new org.apache.thrift.meta_data.FieldMetaData("ipAlumno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mostrarParticipacion_args.class, metaDataMap);
    }

    public mostrarParticipacion_args() {
    }

    public mostrarParticipacion_args(
      java.lang.String ipAlumno)
    {
      this();
      this.ipAlumno = ipAlumno;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mostrarParticipacion_args(mostrarParticipacion_args other) {
      if (other.isSetIpAlumno()) {
        this.ipAlumno = other.ipAlumno;
      }
    }

    public mostrarParticipacion_args deepCopy() {
      return new mostrarParticipacion_args(this);
    }

    @Override
    public void clear() {
      this.ipAlumno = null;
    }

    public java.lang.String getIpAlumno() {
      return this.ipAlumno;
    }

    public mostrarParticipacion_args setIpAlumno(java.lang.String ipAlumno) {
      this.ipAlumno = ipAlumno;
      return this;
    }

    public void unsetIpAlumno() {
      this.ipAlumno = null;
    }

    /** Returns true if field ipAlumno is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAlumno() {
      return this.ipAlumno != null;
    }

    public void setIpAlumnoIsSet(boolean value) {
      if (!value) {
        this.ipAlumno = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IP_ALUMNO:
        if (value == null) {
          unsetIpAlumno();
        } else {
          setIpAlumno((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ALUMNO:
        return getIpAlumno();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IP_ALUMNO:
        return isSetIpAlumno();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mostrarParticipacion_args)
        return this.equals((mostrarParticipacion_args)that);
      return false;
    }

    public boolean equals(mostrarParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ipAlumno = true && this.isSetIpAlumno();
      boolean that_present_ipAlumno = true && that.isSetIpAlumno();
      if (this_present_ipAlumno || that_present_ipAlumno) {
        if (!(this_present_ipAlumno && that_present_ipAlumno))
          return false;
        if (!this.ipAlumno.equals(that.ipAlumno))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIpAlumno()) ? 131071 : 524287);
      if (isSetIpAlumno())
        hashCode = hashCode * 8191 + ipAlumno.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mostrarParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIpAlumno()).compareTo(other.isSetIpAlumno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAlumno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAlumno, other.ipAlumno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mostrarParticipacion_args(");
      boolean first = true;

      sb.append("ipAlumno:");
      if (this.ipAlumno == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAlumno);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mostrarParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarParticipacion_argsStandardScheme getScheme() {
        return new mostrarParticipacion_argsStandardScheme();
      }
    }

    private static class mostrarParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mostrarParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mostrarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ALUMNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAlumno = iprot.readString();
                struct.setIpAlumnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mostrarParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAlumno != null) {
          oprot.writeFieldBegin(IP_ALUMNO_FIELD_DESC);
          oprot.writeString(struct.ipAlumno);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mostrarParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarParticipacion_argsTupleScheme getScheme() {
        return new mostrarParticipacion_argsTupleScheme();
      }
    }

    private static class mostrarParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mostrarParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mostrarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIpAlumno()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpAlumno()) {
          oprot.writeString(struct.ipAlumno);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mostrarParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipAlumno = iprot.readString();
          struct.setIpAlumnoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mostrarParticipacion_result implements org.apache.thrift.TBase<mostrarParticipacion_result, mostrarParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<mostrarParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mostrarParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mostrarParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mostrarParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mostrarParticipacion_result.class, metaDataMap);
    }

    public mostrarParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mostrarParticipacion_result(mostrarParticipacion_result other) {
    }

    public mostrarParticipacion_result deepCopy() {
      return new mostrarParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mostrarParticipacion_result)
        return this.equals((mostrarParticipacion_result)that);
      return false;
    }

    public boolean equals(mostrarParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(mostrarParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mostrarParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mostrarParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarParticipacion_resultStandardScheme getScheme() {
        return new mostrarParticipacion_resultStandardScheme();
      }
    }

    private static class mostrarParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mostrarParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mostrarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mostrarParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mostrarParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mostrarParticipacion_resultTupleScheme getScheme() {
        return new mostrarParticipacion_resultTupleScheme();
      }
    }

    private static class mostrarParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mostrarParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mostrarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mostrarParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activarSolicitudParticipacion_args implements org.apache.thrift.TBase<activarSolicitudParticipacion_args, activarSolicitudParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<activarSolicitudParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activarSolicitudParticipacion_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activarSolicitudParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activarSolicitudParticipacion_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activarSolicitudParticipacion_args.class, metaDataMap);
    }

    public activarSolicitudParticipacion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activarSolicitudParticipacion_args(activarSolicitudParticipacion_args other) {
    }

    public activarSolicitudParticipacion_args deepCopy() {
      return new activarSolicitudParticipacion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activarSolicitudParticipacion_args)
        return this.equals((activarSolicitudParticipacion_args)that);
      return false;
    }

    public boolean equals(activarSolicitudParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(activarSolicitudParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activarSolicitudParticipacion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activarSolicitudParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activarSolicitudParticipacion_argsStandardScheme getScheme() {
        return new activarSolicitudParticipacion_argsStandardScheme();
      }
    }

    private static class activarSolicitudParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<activarSolicitudParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activarSolicitudParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activarSolicitudParticipacion_argsTupleScheme getScheme() {
        return new activarSolicitudParticipacion_argsTupleScheme();
      }
    }

    private static class activarSolicitudParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<activarSolicitudParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activarSolicitudParticipacion_result implements org.apache.thrift.TBase<activarSolicitudParticipacion_result, activarSolicitudParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<activarSolicitudParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activarSolicitudParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activarSolicitudParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activarSolicitudParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activarSolicitudParticipacion_result.class, metaDataMap);
    }

    public activarSolicitudParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activarSolicitudParticipacion_result(activarSolicitudParticipacion_result other) {
    }

    public activarSolicitudParticipacion_result deepCopy() {
      return new activarSolicitudParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activarSolicitudParticipacion_result)
        return this.equals((activarSolicitudParticipacion_result)that);
      return false;
    }

    public boolean equals(activarSolicitudParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(activarSolicitudParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activarSolicitudParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activarSolicitudParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activarSolicitudParticipacion_resultStandardScheme getScheme() {
        return new activarSolicitudParticipacion_resultStandardScheme();
      }
    }

    private static class activarSolicitudParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<activarSolicitudParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activarSolicitudParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activarSolicitudParticipacion_resultTupleScheme getScheme() {
        return new activarSolicitudParticipacion_resultTupleScheme();
      }
    }

    private static class activarSolicitudParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<activarSolicitudParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class desactivarSolicitudParticipacion_args implements org.apache.thrift.TBase<desactivarSolicitudParticipacion_args, desactivarSolicitudParticipacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<desactivarSolicitudParticipacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("desactivarSolicitudParticipacion_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new desactivarSolicitudParticipacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new desactivarSolicitudParticipacion_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(desactivarSolicitudParticipacion_args.class, metaDataMap);
    }

    public desactivarSolicitudParticipacion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public desactivarSolicitudParticipacion_args(desactivarSolicitudParticipacion_args other) {
    }

    public desactivarSolicitudParticipacion_args deepCopy() {
      return new desactivarSolicitudParticipacion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof desactivarSolicitudParticipacion_args)
        return this.equals((desactivarSolicitudParticipacion_args)that);
      return false;
    }

    public boolean equals(desactivarSolicitudParticipacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(desactivarSolicitudParticipacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("desactivarSolicitudParticipacion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class desactivarSolicitudParticipacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public desactivarSolicitudParticipacion_argsStandardScheme getScheme() {
        return new desactivarSolicitudParticipacion_argsStandardScheme();
      }
    }

    private static class desactivarSolicitudParticipacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<desactivarSolicitudParticipacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, desactivarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, desactivarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class desactivarSolicitudParticipacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public desactivarSolicitudParticipacion_argsTupleScheme getScheme() {
        return new desactivarSolicitudParticipacion_argsTupleScheme();
      }
    }

    private static class desactivarSolicitudParticipacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<desactivarSolicitudParticipacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, desactivarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, desactivarSolicitudParticipacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class desactivarSolicitudParticipacion_result implements org.apache.thrift.TBase<desactivarSolicitudParticipacion_result, desactivarSolicitudParticipacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<desactivarSolicitudParticipacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("desactivarSolicitudParticipacion_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new desactivarSolicitudParticipacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new desactivarSolicitudParticipacion_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(desactivarSolicitudParticipacion_result.class, metaDataMap);
    }

    public desactivarSolicitudParticipacion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public desactivarSolicitudParticipacion_result(desactivarSolicitudParticipacion_result other) {
    }

    public desactivarSolicitudParticipacion_result deepCopy() {
      return new desactivarSolicitudParticipacion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof desactivarSolicitudParticipacion_result)
        return this.equals((desactivarSolicitudParticipacion_result)that);
      return false;
    }

    public boolean equals(desactivarSolicitudParticipacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(desactivarSolicitudParticipacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("desactivarSolicitudParticipacion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class desactivarSolicitudParticipacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public desactivarSolicitudParticipacion_resultStandardScheme getScheme() {
        return new desactivarSolicitudParticipacion_resultStandardScheme();
      }
    }

    private static class desactivarSolicitudParticipacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<desactivarSolicitudParticipacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, desactivarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, desactivarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class desactivarSolicitudParticipacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public desactivarSolicitudParticipacion_resultTupleScheme getScheme() {
        return new desactivarSolicitudParticipacion_resultTupleScheme();
      }
    }

    private static class desactivarSolicitudParticipacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<desactivarSolicitudParticipacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, desactivarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, desactivarSolicitudParticipacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pedirControl_args implements org.apache.thrift.TBase<pedirControl_args, pedirControl_args._Fields>, java.io.Serializable, Cloneable, Comparable<pedirControl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pedirControl_args");

    private static final org.apache.thrift.protocol.TField IP_ALUMNO_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAlumno", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pedirControl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pedirControl_argsTupleSchemeFactory();

    public java.lang.String ipAlumno; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ALUMNO((short)1, "ipAlumno");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ALUMNO
            return IP_ALUMNO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ALUMNO, new org.apache.thrift.meta_data.FieldMetaData("ipAlumno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pedirControl_args.class, metaDataMap);
    }

    public pedirControl_args() {
    }

    public pedirControl_args(
      java.lang.String ipAlumno)
    {
      this();
      this.ipAlumno = ipAlumno;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pedirControl_args(pedirControl_args other) {
      if (other.isSetIpAlumno()) {
        this.ipAlumno = other.ipAlumno;
      }
    }

    public pedirControl_args deepCopy() {
      return new pedirControl_args(this);
    }

    @Override
    public void clear() {
      this.ipAlumno = null;
    }

    public java.lang.String getIpAlumno() {
      return this.ipAlumno;
    }

    public pedirControl_args setIpAlumno(java.lang.String ipAlumno) {
      this.ipAlumno = ipAlumno;
      return this;
    }

    public void unsetIpAlumno() {
      this.ipAlumno = null;
    }

    /** Returns true if field ipAlumno is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAlumno() {
      return this.ipAlumno != null;
    }

    public void setIpAlumnoIsSet(boolean value) {
      if (!value) {
        this.ipAlumno = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IP_ALUMNO:
        if (value == null) {
          unsetIpAlumno();
        } else {
          setIpAlumno((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ALUMNO:
        return getIpAlumno();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IP_ALUMNO:
        return isSetIpAlumno();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pedirControl_args)
        return this.equals((pedirControl_args)that);
      return false;
    }

    public boolean equals(pedirControl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ipAlumno = true && this.isSetIpAlumno();
      boolean that_present_ipAlumno = true && that.isSetIpAlumno();
      if (this_present_ipAlumno || that_present_ipAlumno) {
        if (!(this_present_ipAlumno && that_present_ipAlumno))
          return false;
        if (!this.ipAlumno.equals(that.ipAlumno))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIpAlumno()) ? 131071 : 524287);
      if (isSetIpAlumno())
        hashCode = hashCode * 8191 + ipAlumno.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pedirControl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIpAlumno()).compareTo(other.isSetIpAlumno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAlumno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAlumno, other.ipAlumno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pedirControl_args(");
      boolean first = true;

      sb.append("ipAlumno:");
      if (this.ipAlumno == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAlumno);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pedirControl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirControl_argsStandardScheme getScheme() {
        return new pedirControl_argsStandardScheme();
      }
    }

    private static class pedirControl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pedirControl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pedirControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ALUMNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAlumno = iprot.readString();
                struct.setIpAlumnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pedirControl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAlumno != null) {
          oprot.writeFieldBegin(IP_ALUMNO_FIELD_DESC);
          oprot.writeString(struct.ipAlumno);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pedirControl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirControl_argsTupleScheme getScheme() {
        return new pedirControl_argsTupleScheme();
      }
    }

    private static class pedirControl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pedirControl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pedirControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIpAlumno()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpAlumno()) {
          oprot.writeString(struct.ipAlumno);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pedirControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipAlumno = iprot.readString();
          struct.setIpAlumnoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pedirControl_result implements org.apache.thrift.TBase<pedirControl_result, pedirControl_result._Fields>, java.io.Serializable, Cloneable, Comparable<pedirControl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pedirControl_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pedirControl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pedirControl_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pedirControl_result.class, metaDataMap);
    }

    public pedirControl_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pedirControl_result(pedirControl_result other) {
    }

    public pedirControl_result deepCopy() {
      return new pedirControl_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pedirControl_result)
        return this.equals((pedirControl_result)that);
      return false;
    }

    public boolean equals(pedirControl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(pedirControl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pedirControl_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pedirControl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirControl_resultStandardScheme getScheme() {
        return new pedirControl_resultStandardScheme();
      }
    }

    private static class pedirControl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pedirControl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pedirControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pedirControl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pedirControl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pedirControl_resultTupleScheme getScheme() {
        return new pedirControl_resultTupleScheme();
      }
    }

    private static class pedirControl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pedirControl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pedirControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pedirControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerControl_args implements org.apache.thrift.TBase<obtenerControl_args, obtenerControl_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerControl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerControl_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerControl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerControl_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerControl_args.class, metaDataMap);
    }

    public obtenerControl_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerControl_args(obtenerControl_args other) {
    }

    public obtenerControl_args deepCopy() {
      return new obtenerControl_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerControl_args)
        return this.equals((obtenerControl_args)that);
      return false;
    }

    public boolean equals(obtenerControl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtenerControl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerControl_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerControl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerControl_argsStandardScheme getScheme() {
        return new obtenerControl_argsStandardScheme();
      }
    }

    private static class obtenerControl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerControl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerControl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerControl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerControl_argsTupleScheme getScheme() {
        return new obtenerControl_argsTupleScheme();
      }
    }

    private static class obtenerControl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerControl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerControl_result implements org.apache.thrift.TBase<obtenerControl_result, obtenerControl_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerControl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerControl_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerControl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerControl_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerControl_result.class, metaDataMap);
    }

    public obtenerControl_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerControl_result(obtenerControl_result other) {
    }

    public obtenerControl_result deepCopy() {
      return new obtenerControl_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerControl_result)
        return this.equals((obtenerControl_result)that);
      return false;
    }

    public boolean equals(obtenerControl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtenerControl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerControl_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerControl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerControl_resultStandardScheme getScheme() {
        return new obtenerControl_resultStandardScheme();
      }
    }

    private static class obtenerControl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerControl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerControl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerControl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerControl_resultTupleScheme getScheme() {
        return new obtenerControl_resultTupleScheme();
      }
    }

    private static class obtenerControl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerControl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dejarControl_args implements org.apache.thrift.TBase<dejarControl_args, dejarControl_args._Fields>, java.io.Serializable, Cloneable, Comparable<dejarControl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dejarControl_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dejarControl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dejarControl_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dejarControl_args.class, metaDataMap);
    }

    public dejarControl_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dejarControl_args(dejarControl_args other) {
    }

    public dejarControl_args deepCopy() {
      return new dejarControl_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dejarControl_args)
        return this.equals((dejarControl_args)that);
      return false;
    }

    public boolean equals(dejarControl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(dejarControl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dejarControl_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dejarControl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dejarControl_argsStandardScheme getScheme() {
        return new dejarControl_argsStandardScheme();
      }
    }

    private static class dejarControl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dejarControl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dejarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dejarControl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dejarControl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dejarControl_argsTupleScheme getScheme() {
        return new dejarControl_argsTupleScheme();
      }
    }

    private static class dejarControl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dejarControl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dejarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dejarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dejarControl_result implements org.apache.thrift.TBase<dejarControl_result, dejarControl_result._Fields>, java.io.Serializable, Cloneable, Comparable<dejarControl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dejarControl_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dejarControl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dejarControl_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dejarControl_result.class, metaDataMap);
    }

    public dejarControl_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dejarControl_result(dejarControl_result other) {
    }

    public dejarControl_result deepCopy() {
      return new dejarControl_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dejarControl_result)
        return this.equals((dejarControl_result)that);
      return false;
    }

    public boolean equals(dejarControl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(dejarControl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dejarControl_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dejarControl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dejarControl_resultStandardScheme getScheme() {
        return new dejarControl_resultStandardScheme();
      }
    }

    private static class dejarControl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dejarControl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dejarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dejarControl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dejarControl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dejarControl_resultTupleScheme getScheme() {
        return new dejarControl_resultTupleScheme();
      }
    }

    private static class dejarControl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dejarControl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dejarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dejarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarControl_args implements org.apache.thrift.TBase<recuperarControl_args, recuperarControl_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarControl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarControl_args");

    private static final org.apache.thrift.protocol.TField IP_ALUMNO_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAlumno", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarControl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarControl_argsTupleSchemeFactory();

    public java.lang.String ipAlumno; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ALUMNO((short)1, "ipAlumno");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ALUMNO
            return IP_ALUMNO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ALUMNO, new org.apache.thrift.meta_data.FieldMetaData("ipAlumno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarControl_args.class, metaDataMap);
    }

    public recuperarControl_args() {
    }

    public recuperarControl_args(
      java.lang.String ipAlumno)
    {
      this();
      this.ipAlumno = ipAlumno;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarControl_args(recuperarControl_args other) {
      if (other.isSetIpAlumno()) {
        this.ipAlumno = other.ipAlumno;
      }
    }

    public recuperarControl_args deepCopy() {
      return new recuperarControl_args(this);
    }

    @Override
    public void clear() {
      this.ipAlumno = null;
    }

    public java.lang.String getIpAlumno() {
      return this.ipAlumno;
    }

    public recuperarControl_args setIpAlumno(java.lang.String ipAlumno) {
      this.ipAlumno = ipAlumno;
      return this;
    }

    public void unsetIpAlumno() {
      this.ipAlumno = null;
    }

    /** Returns true if field ipAlumno is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAlumno() {
      return this.ipAlumno != null;
    }

    public void setIpAlumnoIsSet(boolean value) {
      if (!value) {
        this.ipAlumno = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IP_ALUMNO:
        if (value == null) {
          unsetIpAlumno();
        } else {
          setIpAlumno((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ALUMNO:
        return getIpAlumno();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IP_ALUMNO:
        return isSetIpAlumno();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarControl_args)
        return this.equals((recuperarControl_args)that);
      return false;
    }

    public boolean equals(recuperarControl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ipAlumno = true && this.isSetIpAlumno();
      boolean that_present_ipAlumno = true && that.isSetIpAlumno();
      if (this_present_ipAlumno || that_present_ipAlumno) {
        if (!(this_present_ipAlumno && that_present_ipAlumno))
          return false;
        if (!this.ipAlumno.equals(that.ipAlumno))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIpAlumno()) ? 131071 : 524287);
      if (isSetIpAlumno())
        hashCode = hashCode * 8191 + ipAlumno.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarControl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIpAlumno()).compareTo(other.isSetIpAlumno());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAlumno()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAlumno, other.ipAlumno);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarControl_args(");
      boolean first = true;

      sb.append("ipAlumno:");
      if (this.ipAlumno == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAlumno);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarControl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarControl_argsStandardScheme getScheme() {
        return new recuperarControl_argsStandardScheme();
      }
    }

    private static class recuperarControl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarControl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ALUMNO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAlumno = iprot.readString();
                struct.setIpAlumnoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarControl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAlumno != null) {
          oprot.writeFieldBegin(IP_ALUMNO_FIELD_DESC);
          oprot.writeString(struct.ipAlumno);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarControl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarControl_argsTupleScheme getScheme() {
        return new recuperarControl_argsTupleScheme();
      }
    }

    private static class recuperarControl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarControl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIpAlumno()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpAlumno()) {
          oprot.writeString(struct.ipAlumno);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipAlumno = iprot.readString();
          struct.setIpAlumnoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarControl_result implements org.apache.thrift.TBase<recuperarControl_result, recuperarControl_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarControl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarControl_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarControl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarControl_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarControl_result.class, metaDataMap);
    }

    public recuperarControl_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarControl_result(recuperarControl_result other) {
    }

    public recuperarControl_result deepCopy() {
      return new recuperarControl_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarControl_result)
        return this.equals((recuperarControl_result)that);
      return false;
    }

    public boolean equals(recuperarControl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarControl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarControl_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarControl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarControl_resultStandardScheme getScheme() {
        return new recuperarControl_resultStandardScheme();
      }
    }

    private static class recuperarControl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarControl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarControl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarControl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarControl_resultTupleScheme getScheme() {
        return new recuperarControl_resultTupleScheme();
      }
    }

    private static class recuperarControl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarControl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class salirAula_args implements org.apache.thrift.TBase<salirAula_args, salirAula_args._Fields>, java.io.Serializable, Cloneable, Comparable<salirAula_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salirAula_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLASE_FIELD_DESC = new org.apache.thrift.protocol.TField("clase", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROL_FIELD_DESC = new org.apache.thrift.protocol.TField("rol", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new salirAula_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new salirAula_argsTupleSchemeFactory();

    public java.lang.String nombre; // required
    public java.lang.String ip; // required
    public java.lang.String clase; // required
    public int rol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre"),
      IP((short)2, "ip"),
      CLASE((short)3, "clase"),
      ROL((short)4, "rol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          case 2: // IP
            return IP;
          case 3: // CLASE
            return CLASE;
          case 4: // ROL
            return ROL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASE, new org.apache.thrift.meta_data.FieldMetaData("clase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROL, new org.apache.thrift.meta_data.FieldMetaData("rol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salirAula_args.class, metaDataMap);
    }

    public salirAula_args() {
    }

    public salirAula_args(
      java.lang.String nombre,
      java.lang.String ip,
      java.lang.String clase,
      int rol)
    {
      this();
      this.nombre = nombre;
      this.ip = ip;
      this.clase = clase;
      this.rol = rol;
      setRolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salirAula_args(salirAula_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      if (other.isSetClase()) {
        this.clase = other.clase;
      }
      this.rol = other.rol;
    }

    public salirAula_args deepCopy() {
      return new salirAula_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
      this.ip = null;
      this.clase = null;
      setRolIsSet(false);
      this.rol = 0;
    }

    public java.lang.String getNombre() {
      return this.nombre;
    }

    public salirAula_args setNombre(java.lang.String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public java.lang.String getIp() {
      return this.ip;
    }

    public salirAula_args setIp(java.lang.String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public java.lang.String getClase() {
      return this.clase;
    }

    public salirAula_args setClase(java.lang.String clase) {
      this.clase = clase;
      return this;
    }

    public void unsetClase() {
      this.clase = null;
    }

    /** Returns true if field clase is set (has been assigned a value) and false otherwise */
    public boolean isSetClase() {
      return this.clase != null;
    }

    public void setClaseIsSet(boolean value) {
      if (!value) {
        this.clase = null;
      }
    }

    public int getRol() {
      return this.rol;
    }

    public salirAula_args setRol(int rol) {
      this.rol = rol;
      setRolIsSet(true);
      return this;
    }

    public void unsetRol() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    /** Returns true if field rol is set (has been assigned a value) and false otherwise */
    public boolean isSetRol() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    public void setRolIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((java.lang.String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((java.lang.String)value);
        }
        break;

      case CLASE:
        if (value == null) {
          unsetClase();
        } else {
          setClase((java.lang.String)value);
        }
        break;

      case ROL:
        if (value == null) {
          unsetRol();
        } else {
          setRol((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      case IP:
        return getIp();

      case CLASE:
        return getClase();

      case ROL:
        return getRol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      case IP:
        return isSetIp();
      case CLASE:
        return isSetClase();
      case ROL:
        return isSetRol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof salirAula_args)
        return this.equals((salirAula_args)that);
      return false;
    }

    public boolean equals(salirAula_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_clase = true && this.isSetClase();
      boolean that_present_clase = true && that.isSetClase();
      if (this_present_clase || that_present_clase) {
        if (!(this_present_clase && that_present_clase))
          return false;
        if (!this.clase.equals(that.clase))
          return false;
      }

      boolean this_present_rol = true;
      boolean that_present_rol = true;
      if (this_present_rol || that_present_rol) {
        if (!(this_present_rol && that_present_rol))
          return false;
        if (this.rol != that.rol)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
      if (isSetNombre())
        hashCode = hashCode * 8191 + nombre.hashCode();

      hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
      if (isSetIp())
        hashCode = hashCode * 8191 + ip.hashCode();

      hashCode = hashCode * 8191 + ((isSetClase()) ? 131071 : 524287);
      if (isSetClase())
        hashCode = hashCode * 8191 + clase.hashCode();

      hashCode = hashCode * 8191 + rol;

      return hashCode;
    }

    @Override
    public int compareTo(salirAula_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClase()).compareTo(other.isSetClase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clase, other.clase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRol()).compareTo(other.isSetRol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rol, other.rol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("salirAula_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clase:");
      if (this.clase == null) {
        sb.append("null");
      } else {
        sb.append(this.clase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rol:");
      sb.append(this.rol);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salirAula_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salirAula_argsStandardScheme getScheme() {
        return new salirAula_argsStandardScheme();
      }
    }

    private static class salirAula_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<salirAula_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salirAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clase = iprot.readString();
                struct.setClaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rol = iprot.readI32();
                struct.setRolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salirAula_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        if (struct.clase != null) {
          oprot.writeFieldBegin(CLASE_FIELD_DESC);
          oprot.writeString(struct.clase);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROL_FIELD_DESC);
        oprot.writeI32(struct.rol);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salirAula_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salirAula_argsTupleScheme getScheme() {
        return new salirAula_argsTupleScheme();
      }
    }

    private static class salirAula_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<salirAula_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salirAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetClase()) {
          optionals.set(2);
        }
        if (struct.isSetRol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetClase()) {
          oprot.writeString(struct.clase);
        }
        if (struct.isSetRol()) {
          oprot.writeI32(struct.rol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salirAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clase = iprot.readString();
          struct.setClaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rol = iprot.readI32();
          struct.setRolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class salirAula_result implements org.apache.thrift.TBase<salirAula_result, salirAula_result._Fields>, java.io.Serializable, Cloneable, Comparable<salirAula_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salirAula_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new salirAula_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new salirAula_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salirAula_result.class, metaDataMap);
    }

    public salirAula_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salirAula_result(salirAula_result other) {
    }

    public salirAula_result deepCopy() {
      return new salirAula_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof salirAula_result)
        return this.equals((salirAula_result)that);
      return false;
    }

    public boolean equals(salirAula_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(salirAula_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("salirAula_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salirAula_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salirAula_resultStandardScheme getScheme() {
        return new salirAula_resultStandardScheme();
      }
    }

    private static class salirAula_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<salirAula_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salirAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salirAula_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salirAula_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salirAula_resultTupleScheme getScheme() {
        return new salirAula_resultTupleScheme();
      }
    }

    private static class salirAula_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<salirAula_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salirAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salirAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class entrarAula_args implements org.apache.thrift.TBase<entrarAula_args, entrarAula_args._Fields>, java.io.Serializable, Cloneable, Comparable<entrarAula_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("entrarAula_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLASE_FIELD_DESC = new org.apache.thrift.protocol.TField("clase", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROL_FIELD_DESC = new org.apache.thrift.protocol.TField("rol", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new entrarAula_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new entrarAula_argsTupleSchemeFactory();

    public java.lang.String nombre; // required
    public java.lang.String ip; // required
    public java.lang.String clase; // required
    public int rol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre"),
      IP((short)2, "ip"),
      CLASE((short)3, "clase"),
      ROL((short)4, "rol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          case 2: // IP
            return IP;
          case 3: // CLASE
            return CLASE;
          case 4: // ROL
            return ROL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASE, new org.apache.thrift.meta_data.FieldMetaData("clase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROL, new org.apache.thrift.meta_data.FieldMetaData("rol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(entrarAula_args.class, metaDataMap);
    }

    public entrarAula_args() {
    }

    public entrarAula_args(
      java.lang.String nombre,
      java.lang.String ip,
      java.lang.String clase,
      int rol)
    {
      this();
      this.nombre = nombre;
      this.ip = ip;
      this.clase = clase;
      this.rol = rol;
      setRolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public entrarAula_args(entrarAula_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      if (other.isSetClase()) {
        this.clase = other.clase;
      }
      this.rol = other.rol;
    }

    public entrarAula_args deepCopy() {
      return new entrarAula_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
      this.ip = null;
      this.clase = null;
      setRolIsSet(false);
      this.rol = 0;
    }

    public java.lang.String getNombre() {
      return this.nombre;
    }

    public entrarAula_args setNombre(java.lang.String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public java.lang.String getIp() {
      return this.ip;
    }

    public entrarAula_args setIp(java.lang.String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public java.lang.String getClase() {
      return this.clase;
    }

    public entrarAula_args setClase(java.lang.String clase) {
      this.clase = clase;
      return this;
    }

    public void unsetClase() {
      this.clase = null;
    }

    /** Returns true if field clase is set (has been assigned a value) and false otherwise */
    public boolean isSetClase() {
      return this.clase != null;
    }

    public void setClaseIsSet(boolean value) {
      if (!value) {
        this.clase = null;
      }
    }

    public int getRol() {
      return this.rol;
    }

    public entrarAula_args setRol(int rol) {
      this.rol = rol;
      setRolIsSet(true);
      return this;
    }

    public void unsetRol() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    /** Returns true if field rol is set (has been assigned a value) and false otherwise */
    public boolean isSetRol() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    public void setRolIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((java.lang.String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((java.lang.String)value);
        }
        break;

      case CLASE:
        if (value == null) {
          unsetClase();
        } else {
          setClase((java.lang.String)value);
        }
        break;

      case ROL:
        if (value == null) {
          unsetRol();
        } else {
          setRol((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      case IP:
        return getIp();

      case CLASE:
        return getClase();

      case ROL:
        return getRol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      case IP:
        return isSetIp();
      case CLASE:
        return isSetClase();
      case ROL:
        return isSetRol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof entrarAula_args)
        return this.equals((entrarAula_args)that);
      return false;
    }

    public boolean equals(entrarAula_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_clase = true && this.isSetClase();
      boolean that_present_clase = true && that.isSetClase();
      if (this_present_clase || that_present_clase) {
        if (!(this_present_clase && that_present_clase))
          return false;
        if (!this.clase.equals(that.clase))
          return false;
      }

      boolean this_present_rol = true;
      boolean that_present_rol = true;
      if (this_present_rol || that_present_rol) {
        if (!(this_present_rol && that_present_rol))
          return false;
        if (this.rol != that.rol)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
      if (isSetNombre())
        hashCode = hashCode * 8191 + nombre.hashCode();

      hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
      if (isSetIp())
        hashCode = hashCode * 8191 + ip.hashCode();

      hashCode = hashCode * 8191 + ((isSetClase()) ? 131071 : 524287);
      if (isSetClase())
        hashCode = hashCode * 8191 + clase.hashCode();

      hashCode = hashCode * 8191 + rol;

      return hashCode;
    }

    @Override
    public int compareTo(entrarAula_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClase()).compareTo(other.isSetClase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clase, other.clase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRol()).compareTo(other.isSetRol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rol, other.rol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("entrarAula_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clase:");
      if (this.clase == null) {
        sb.append("null");
      } else {
        sb.append(this.clase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rol:");
      sb.append(this.rol);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class entrarAula_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public entrarAula_argsStandardScheme getScheme() {
        return new entrarAula_argsStandardScheme();
      }
    }

    private static class entrarAula_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<entrarAula_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, entrarAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clase = iprot.readString();
                struct.setClaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rol = iprot.readI32();
                struct.setRolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, entrarAula_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        if (struct.clase != null) {
          oprot.writeFieldBegin(CLASE_FIELD_DESC);
          oprot.writeString(struct.clase);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROL_FIELD_DESC);
        oprot.writeI32(struct.rol);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class entrarAula_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public entrarAula_argsTupleScheme getScheme() {
        return new entrarAula_argsTupleScheme();
      }
    }

    private static class entrarAula_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<entrarAula_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, entrarAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetClase()) {
          optionals.set(2);
        }
        if (struct.isSetRol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetClase()) {
          oprot.writeString(struct.clase);
        }
        if (struct.isSetRol()) {
          oprot.writeI32(struct.rol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, entrarAula_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clase = iprot.readString();
          struct.setClaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rol = iprot.readI32();
          struct.setRolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class entrarAula_result implements org.apache.thrift.TBase<entrarAula_result, entrarAula_result._Fields>, java.io.Serializable, Cloneable, Comparable<entrarAula_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("entrarAula_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new entrarAula_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new entrarAula_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(entrarAula_result.class, metaDataMap);
    }

    public entrarAula_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public entrarAula_result(entrarAula_result other) {
    }

    public entrarAula_result deepCopy() {
      return new entrarAula_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof entrarAula_result)
        return this.equals((entrarAula_result)that);
      return false;
    }

    public boolean equals(entrarAula_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(entrarAula_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("entrarAula_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class entrarAula_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public entrarAula_resultStandardScheme getScheme() {
        return new entrarAula_resultStandardScheme();
      }
    }

    private static class entrarAula_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<entrarAula_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, entrarAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, entrarAula_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class entrarAula_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public entrarAula_resultTupleScheme getScheme() {
        return new entrarAula_resultTupleScheme();
      }
    }

    private static class entrarAula_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<entrarAula_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, entrarAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, entrarAula_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarUsuariosConectados_args implements org.apache.thrift.TBase<actualizarUsuariosConectados_args, actualizarUsuariosConectados_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarUsuariosConectados_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarUsuariosConectados_args");

    private static final org.apache.thrift.protocol.TField CONECTADOS_FIELD_DESC = new org.apache.thrift.protocol.TField("conectados", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarUsuariosConectados_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarUsuariosConectados_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> conectados; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONECTADOS((short)1, "conectados");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONECTADOS
            return CONECTADOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONECTADOS, new org.apache.thrift.meta_data.FieldMetaData("conectados", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarUsuariosConectados_args.class, metaDataMap);
    }

    public actualizarUsuariosConectados_args() {
    }

    public actualizarUsuariosConectados_args(
      java.util.List<java.lang.String> conectados)
    {
      this();
      this.conectados = conectados;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarUsuariosConectados_args(actualizarUsuariosConectados_args other) {
      if (other.isSetConectados()) {
        java.util.List<java.lang.String> __this__conectados = new java.util.ArrayList<java.lang.String>(other.conectados);
        this.conectados = __this__conectados;
      }
    }

    public actualizarUsuariosConectados_args deepCopy() {
      return new actualizarUsuariosConectados_args(this);
    }

    @Override
    public void clear() {
      this.conectados = null;
    }

    public int getConectadosSize() {
      return (this.conectados == null) ? 0 : this.conectados.size();
    }

    public java.util.Iterator<java.lang.String> getConectadosIterator() {
      return (this.conectados == null) ? null : this.conectados.iterator();
    }

    public void addToConectados(java.lang.String elem) {
      if (this.conectados == null) {
        this.conectados = new java.util.ArrayList<java.lang.String>();
      }
      this.conectados.add(elem);
    }

    public java.util.List<java.lang.String> getConectados() {
      return this.conectados;
    }

    public actualizarUsuariosConectados_args setConectados(java.util.List<java.lang.String> conectados) {
      this.conectados = conectados;
      return this;
    }

    public void unsetConectados() {
      this.conectados = null;
    }

    /** Returns true if field conectados is set (has been assigned a value) and false otherwise */
    public boolean isSetConectados() {
      return this.conectados != null;
    }

    public void setConectadosIsSet(boolean value) {
      if (!value) {
        this.conectados = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONECTADOS:
        if (value == null) {
          unsetConectados();
        } else {
          setConectados((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONECTADOS:
        return getConectados();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONECTADOS:
        return isSetConectados();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarUsuariosConectados_args)
        return this.equals((actualizarUsuariosConectados_args)that);
      return false;
    }

    public boolean equals(actualizarUsuariosConectados_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_conectados = true && this.isSetConectados();
      boolean that_present_conectados = true && that.isSetConectados();
      if (this_present_conectados || that_present_conectados) {
        if (!(this_present_conectados && that_present_conectados))
          return false;
        if (!this.conectados.equals(that.conectados))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConectados()) ? 131071 : 524287);
      if (isSetConectados())
        hashCode = hashCode * 8191 + conectados.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(actualizarUsuariosConectados_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConectados()).compareTo(other.isSetConectados());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConectados()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conectados, other.conectados);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarUsuariosConectados_args(");
      boolean first = true;

      sb.append("conectados:");
      if (this.conectados == null) {
        sb.append("null");
      } else {
        sb.append(this.conectados);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarUsuariosConectados_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarUsuariosConectados_argsStandardScheme getScheme() {
        return new actualizarUsuariosConectados_argsStandardScheme();
      }
    }

    private static class actualizarUsuariosConectados_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarUsuariosConectados_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarUsuariosConectados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONECTADOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.conectados = new java.util.ArrayList<java.lang.String>(_list40.size);
                  java.lang.String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.conectados.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setConectadosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarUsuariosConectados_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conectados != null) {
          oprot.writeFieldBegin(CONECTADOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.conectados.size()));
            for (java.lang.String _iter43 : struct.conectados)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarUsuariosConectados_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarUsuariosConectados_argsTupleScheme getScheme() {
        return new actualizarUsuariosConectados_argsTupleScheme();
      }
    }

    private static class actualizarUsuariosConectados_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarUsuariosConectados_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarUsuariosConectados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConectados()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConectados()) {
          {
            oprot.writeI32(struct.conectados.size());
            for (java.lang.String _iter44 : struct.conectados)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarUsuariosConectados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.conectados = new java.util.ArrayList<java.lang.String>(_list45.size);
            java.lang.String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.conectados.add(_elem46);
            }
          }
          struct.setConectadosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarUsuariosConectados_result implements org.apache.thrift.TBase<actualizarUsuariosConectados_result, actualizarUsuariosConectados_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarUsuariosConectados_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarUsuariosConectados_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarUsuariosConectados_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarUsuariosConectados_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarUsuariosConectados_result.class, metaDataMap);
    }

    public actualizarUsuariosConectados_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarUsuariosConectados_result(actualizarUsuariosConectados_result other) {
    }

    public actualizarUsuariosConectados_result deepCopy() {
      return new actualizarUsuariosConectados_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarUsuariosConectados_result)
        return this.equals((actualizarUsuariosConectados_result)that);
      return false;
    }

    public boolean equals(actualizarUsuariosConectados_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(actualizarUsuariosConectados_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarUsuariosConectados_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarUsuariosConectados_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarUsuariosConectados_resultStandardScheme getScheme() {
        return new actualizarUsuariosConectados_resultStandardScheme();
      }
    }

    private static class actualizarUsuariosConectados_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarUsuariosConectados_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarUsuariosConectados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarUsuariosConectados_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarUsuariosConectados_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarUsuariosConectados_resultTupleScheme getScheme() {
        return new actualizarUsuariosConectados_resultTupleScheme();
      }
    }

    private static class actualizarUsuariosConectados_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarUsuariosConectados_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarUsuariosConectados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarUsuariosConectados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarParticipantes_args implements org.apache.thrift.TBase<actualizarParticipantes_args, actualizarParticipantes_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarParticipantes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarParticipantes_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarParticipantes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarParticipantes_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarParticipantes_args.class, metaDataMap);
    }

    public actualizarParticipantes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarParticipantes_args(actualizarParticipantes_args other) {
    }

    public actualizarParticipantes_args deepCopy() {
      return new actualizarParticipantes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarParticipantes_args)
        return this.equals((actualizarParticipantes_args)that);
      return false;
    }

    public boolean equals(actualizarParticipantes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(actualizarParticipantes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarParticipantes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarParticipantes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarParticipantes_argsStandardScheme getScheme() {
        return new actualizarParticipantes_argsStandardScheme();
      }
    }

    private static class actualizarParticipantes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarParticipantes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarParticipantes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarParticipantes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarParticipantes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarParticipantes_argsTupleScheme getScheme() {
        return new actualizarParticipantes_argsTupleScheme();
      }
    }

    private static class actualizarParticipantes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarParticipantes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarParticipantes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarParticipantes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarParticipantes_result implements org.apache.thrift.TBase<actualizarParticipantes_result, actualizarParticipantes_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarParticipantes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarParticipantes_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarParticipantes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarParticipantes_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarParticipantes_result.class, metaDataMap);
    }

    public actualizarParticipantes_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarParticipantes_result(actualizarParticipantes_result other) {
    }

    public actualizarParticipantes_result deepCopy() {
      return new actualizarParticipantes_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarParticipantes_result)
        return this.equals((actualizarParticipantes_result)that);
      return false;
    }

    public boolean equals(actualizarParticipantes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(actualizarParticipantes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarParticipantes_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarParticipantes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarParticipantes_resultStandardScheme getScheme() {
        return new actualizarParticipantes_resultStandardScheme();
      }
    }

    private static class actualizarParticipantes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarParticipantes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarParticipantes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarParticipantes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarParticipantes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarParticipantes_resultTupleScheme getScheme() {
        return new actualizarParticipantes_resultTupleScheme();
      }
    }

    private static class actualizarParticipantes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarParticipantes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarParticipantes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarParticipantes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
